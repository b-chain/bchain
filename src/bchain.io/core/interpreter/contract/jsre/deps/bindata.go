// Code generated by go-bindata.
// sources:
// consensus.md
// bchain.md
// system.md
// pledge.md
// DO NOT EDIT!

package deps

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _consensusMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\x5d\x8f\xab\xba\x15\xfd\x2f\xf3\x5c\x55\x40\x82\xee\xa5\x52\x1f\x02\x09\xc4\x10\x3c\x03\x04\x8c\xfd\x52\xc5\x26\x63\x20\x98\xe4\x4e\x86\x10\x52\xf5\xbf\x57\x26\x1f\x93\x4c\x92\x73\xcf\x51\xab\xaa\x0f\x96\x32\xf8\x6b\xef\xb5\xf6\x5e\xcb\xf3\xcf\x97\xa2\xfe\x5c\x7e\xfc\xa3\x5e\x88\xe5\xcb\xdf\x5e\xca\xed\xc7\xf2\xaf\x6e\x14\x4e\x5e\xfe\xf2\xc2\xd6\x99\xfc\x94\x09\xbb\x03\x0e\x54\x96\x8e\xdd\x2e\xa2\x91\xd1\xff\x9e\xc8\xdf\x7c\xf3\xda\x2a\xde\x38\x58\xff\xe6\x39\x44\xa5\x02\x2a\x0b\x64\x34\xc0\xe2\x1b\x30\xdd\x42\x8b\x2b\x1e\xb0\x46\x1c\x58\xbf\xef\x8e\x67\x84\x15\xd6\xaa\x4f\x8c\xf6\x07\x30\x56\xb8\x3f\xe7\xd0\x2a\xe4\xfc\x68\x37\x1b\x90\x9c\x15\xa6\x42\x07\x61\x4e\x6d\xa8\xb2\xa9\xb9\x5d\xf6\x77\xe9\x55\xd6\x99\xd6\x02\x65\xaf\x19\x52\x0b\x92\x82\xb5\x8f\xe2\x8f\xd7\x68\x75\xda\x6b\x16\xd4\x31\xca\x85\xea\x56\x99\x66\x74\x64\x62\xaf\x16\x75\x72\xc8\x26\xba\x4a\x91\x5b\xb1\xe2\xf1\x19\xb0\x04\xaa\x3f\x1e\xb5\xbe\x75\x39\x67\x43\x45\xa5\xc4\x22\x19\xd0\x81\xbb\x92\xf1\x51\x91\x0c\xc0\xc4\xdd\x10\xe5\x7c\x16\x1f\xfa\x4e\xfc\xe1\xcf\xf9\x66\x1c\xac\x65\xdc\x9c\x3d\x8b\xd1\x1a\xaa\x5e\xd0\x63\xd3\xaf\x23\x75\xd2\xe0\x41\xb8\xa1\xda\x90\x13\x2d\xb9\xdc\x13\xd4\xd5\x65\x0f\xad\x93\x4f\x2c\x92\xce\x4b\xb7\x67\x5c\xfa\x81\x07\xe1\x10\xa7\xe6\x66\x26\xe0\x8e\xd6\x70\x47\x9d\xb8\x61\x53\x77\x43\xeb\x60\x0d\x4a\xc5\x78\x9b\x7f\x8d\x27\x67\xdf\xac\x79\x8b\x00\xf7\x3a\xb3\x39\xcd\x71\xaf\x1b\x15\xa9\x33\x2c\x64\xbc\xe7\x3b\x25\x1e\x64\xca\xf9\x5b\x74\x59\xd7\x10\xa7\xd2\x16\x28\xac\x88\x1d\xee\x22\xa4\x2b\x04\x65\x15\x5b\xb9\xba\xe7\xb8\x5b\xaa\xc1\x8f\xcb\xbd\x28\xfc\x23\x4b\xa1\x32\x3f\xe7\x73\x7b\x6e\x47\xd2\x6c\xc7\x44\xc0\xdf\xa2\xd1\x7a\x81\xf4\x4d\x66\x9f\xb8\xb3\x74\x65\x81\xd4\x8a\x75\xf9\x7e\x56\x9b\xbb\xac\xcb\x65\x0c\x1b\x2f\x5a\x35\x99\x63\x38\x8b\x34\xaf\x88\xc5\xdb\xfb\xf3\x42\x95\x89\xe1\x03\xbe\xf2\xf3\x5d\x17\xbe\xde\x9f\x70\xc2\x06\x61\x97\x38\x86\x4f\x07\x99\xdc\xd7\xe2\xd4\xcd\x69\x54\xfd\x76\x5e\xdb\x8f\xa9\x5b\x65\xd3\xa4\xa3\x85\x79\x9a\xd7\x15\xaa\xec\x77\x99\x96\x74\x81\x66\x1f\x48\xc4\x1f\xde\x93\x39\xf9\x86\x75\x7a\x81\xd1\x3e\xa7\x02\x56\x12\x27\x9c\x1e\x6b\xec\x2a\x86\x35\xa9\xdd\x1d\x9d\x4f\xf8\x2f\xf1\x5f\xac\xff\xf0\x2e\xc3\x8c\x48\x9a\xe5\x12\xdb\x78\x10\xe6\xac\x0e\xb8\x77\x35\x7f\xe6\xf8\x26\x27\xeb\xf7\x1d\xd6\xec\x2d\xb5\xcc\xfb\xf8\x1c\xb7\x22\xc2\xe8\xc8\x2d\xde\x25\xd5\xf4\x03\x41\xfa\x21\x4b\xe1\x3b\xd5\xf4\xed\x32\x31\x76\x72\x9f\xcc\xe7\x2a\xd6\x1c\x6b\x79\x35\x13\x59\x95\x59\xbc\x20\x62\x9f\x13\xd5\x78\xbe\xb7\x58\xdd\xe4\xbc\x40\x98\x7b\x4e\x9f\x6f\x45\x6b\xa8\x32\x55\xae\xdb\xeb\xa9\x66\x34\x58\x8b\x1b\xea\x24\x0d\x19\x84\x6b\x60\x4d\x0c\x30\x1e\x1d\xf5\xe6\x6a\x7f\x3f\x2e\x9a\xa5\xe7\x6c\x00\x2b\x56\x07\x0d\x4e\xe1\x81\xa4\xae\xe2\x39\x24\xa7\x53\x58\x01\xab\xe5\x40\xc0\x9c\x3a\xfb\x8a\xfc\x08\x83\x08\x6c\x6e\x6b\x41\xe9\xf5\xed\xf6\x5b\xaf\x61\x82\x09\xe3\x53\x62\xf1\xad\xa6\xfa\xef\xbe\xd4\x2d\x7e\x83\x67\x41\x9d\xcf\x73\x9f\xf6\xfd\x46\x52\xc6\x03\x51\xd5\x97\xfe\xf9\xca\xe3\x9d\xfe\x69\x4f\x99\x35\x49\xc3\xe8\xf8\x77\x68\x2d\xe3\x4b\x2f\x5c\xdf\xb3\x79\x10\x77\x77\xac\x9d\xd0\xc9\x90\x5e\xca\xf8\x81\x70\x73\xea\xd8\x0d\xd6\x92\x98\x09\xbb\x61\x1a\x91\x1a\x58\x83\x62\xf4\x01\x1c\xd2\x51\x4d\xe9\xb5\xc3\xed\xda\x02\x58\x5b\xce\x4e\xfd\x3f\xab\xc3\x5d\x3c\x08\xbb\x05\xd2\x6b\xcf\x5a\xf5\x6b\xbc\x08\x3c\xab\xe9\x9c\x3a\x6d\x73\xac\x41\x5e\xf8\x53\xbe\x7f\x9d\xbb\x2b\x38\x77\x27\xaf\x0e\xb4\x7d\xc7\x1f\xe0\x95\x6b\x92\x72\x34\x78\x1d\x9b\x76\x80\x40\x0b\xc7\x5c\xf3\x27\x81\x16\x88\x49\xeb\xcf\x81\x0a\x0f\xb9\x05\x8a\xb6\xbf\x5f\x72\x16\xca\x9e\xea\x56\x3f\xe8\xa1\xb0\xc3\x08\x2a\x33\x91\x7c\x2e\xd2\xd0\xce\x44\xd2\x64\xd6\x91\x9f\x99\x65\x2a\xac\x4e\xaa\xd9\x17\xa6\x52\x7b\xe6\x99\xec\x37\xc1\xd6\x5e\xd4\xf2\x6c\xea\xaa\xe4\x9e\x47\x0d\xa7\x80\xb3\x34\xa9\x58\x5d\x3d\xc2\x30\xcc\x50\xd2\x2d\xa3\x47\xf8\xad\x8a\x1b\x3e\xbe\xf8\x2e\x31\xda\x6f\x4f\x18\xad\x41\x69\x0e\xfd\xf9\xaa\x23\xe3\xb8\x0b\xc7\x79\x19\xce\xcd\x12\x6a\xae\x15\x20\xdc\xc2\x03\x6f\xc3\xd8\x2e\xfc\x71\x30\x84\xa5\x39\x81\x2b\x37\xf7\xc7\x93\x0e\xce\xd9\x30\x28\xc0\x16\x4c\x6d\x95\xa4\xae\x7e\xc1\xe6\x36\xf6\x7d\x1f\x5b\x2c\x3d\xdc\x97\xba\x5c\x60\x61\x6f\x31\xd2\x4b\x92\x1c\xf7\x79\x16\x6b\x97\xe3\x58\x25\x22\xcc\xe1\x01\xb7\x3e\x22\x02\xcf\x63\x95\x94\x78\x8f\x4b\xc9\x19\x56\xfc\x92\xef\x61\x19\x68\xbe\x63\xe7\x7e\x19\x0c\x5f\xc7\x50\x40\x0d\xd7\xff\x13\xee\xaf\x70\xbf\xf3\xb1\x62\xb4\xc6\x9a\xd1\x30\x2d\x69\xd8\x20\x39\x48\x0d\xa1\xd3\x4a\xea\x4f\x49\x22\x7d\x4b\x90\x5e\x67\x0e\xe7\x6f\x73\x85\xfb\xd6\x8a\x2f\xdb\xeb\xfd\xbf\xee\xc1\xdf\xc6\xde\x9f\xdb\x17\x5d\x0e\x91\xda\x52\xc7\x2e\xc9\xf3\xf5\x77\xe3\xde\x9b\xef\x71\x3c\x6a\x6d\xf2\xc9\x9c\x7d\x8e\xb5\x78\x0d\x04\xd9\x62\x94\xbd\x3f\xcf\x1b\xf0\x99\x35\x2a\x8e\xb5\xfc\x40\xdb\xfe\x43\xff\x09\x91\xbe\x02\xd6\xd5\x5c\xb5\x6f\xbe\x34\xde\x34\x66\xa3\xe7\xfe\x18\x8a\xa4\xfa\xee\x8d\x18\xa9\xbb\x0c\xe9\x4a\xef\x8d\x0f\xfa\x4e\xe6\x8f\xb5\xed\x13\xfd\xb4\x3f\xe9\x40\xf6\xf8\x43\x8f\x59\x13\x04\x3f\x66\x62\xaf\x90\x88\xb7\x5e\xf4\x67\xfc\xdb\x07\xa6\x25\x5d\x66\x5d\x3c\x65\x4d\x84\xbd\x65\x5a\xdc\xe3\x79\xe9\x9b\x98\x54\x24\x32\x73\x8a\x0c\x95\xd6\x01\x7f\x93\xef\x5d\xeb\xb1\x87\x5c\x7b\x6b\x36\xcd\x73\xe6\xac\x9a\x23\x6f\xc6\x96\x44\x7a\xcb\x44\xd5\x48\x0f\xbd\xf6\x72\xe0\x5c\x74\xc5\x21\x28\xfe\xa1\xdf\x7f\xc7\x8a\xa2\xaa\x39\x79\xcd\xe5\xbe\x54\x53\x37\x54\x24\xdd\xad\x0e\x55\x02\x58\xf9\xdd\x1a\x30\x56\x8c\x2b\x8d\x7a\x97\xf5\x45\x9c\xa4\xf3\x22\xf3\xf6\xbd\xf4\x13\x39\x7d\xaf\xf5\x6f\xf8\xc1\x05\xd2\xfb\x37\xfc\x5b\x64\xce\x09\xd2\x57\x7d\xdc\x8f\xfa\x24\xb9\xae\xaf\xd1\xfd\x9b\xed\x16\x67\xe3\x99\xde\xca\xf7\x09\xd5\xf6\xd5\xac\x36\xa5\x7f\x29\x9e\xf5\xed\xed\x3c\x57\x6f\xeb\xd4\x86\x0a\x4e\x5d\xe5\x67\x63\xfa\x29\x1d\x89\x8f\x38\xbf\x15\xfd\x3b\xfd\xf3\x84\xc1\x07\xb0\x5c\x46\x8b\xff\x86\x77\x5f\xbd\x27\x4e\xb5\x70\xed\xe3\xe7\x5e\xfb\xbf\xf1\xf1\x1b\xee\x46\xbb\x59\x67\x16\x38\x85\x1b\xac\x3c\xca\x31\x3f\xe3\xb5\x05\x4f\xfa\xfe\x17\xf4\xec\x96\xeb\x49\xd2\x10\x6b\x74\x35\xbf\xb9\xe1\xe3\xf4\xe6\x87\x56\xad\x6c\xbc\x69\xb8\x5e\xa4\xfe\xf9\xff\xe3\xbf\xbf\xfc\xeb\xdf\x01\x00\x00\xff\xff\x3f\xc4\xed\xbc\x68\x0f\x00\x00")

func consensusMdBytes() ([]byte, error) {
	return bindataRead(
		_consensusMd,
		"consensus.md",
	)
}

func consensusMd() (*asset, error) {
	bytes, err := consensusMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "consensus.md", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bchainMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\x5d\x73\xba\x3e\x16\xfe\x2e\xbd\xde\xd9\x89\x50\xf6\xff\x63\x67\xf6\x42\x69\x09\x11\xcb\x4f\x41\x03\xe4\x66\xc7\x90\x16\x10\x82\xac\x88\x8a\x3b\xfb\xdd\x77\x82\x15\x90\xa2\xed\xbe\x5c\x64\xca\x20\xc9\x79\x7b\x9e\xe7\x9c\xf4\x9f\x4f\x71\xb6\x7f\xdf\xfd\x3d\x5b\xf3\xf7\xa7\xbf\x3e\x6d\x8a\xdd\xfb\x9f\xa7\x8e\xfd\xfa\xf4\xa7\xa7\x60\xcb\xc4\xab\x97\x45\x2e\xf9\x1e\x0a\x7d\xd9\x7e\xf6\xbd\x49\x8e\x5e\x40\xfd\xbc\xf0\x26\xb9\xa9\x25\x7f\xbc\x2c\xb6\x96\xb6\x29\xb6\x24\xc3\xa5\x2f\xdb\x39\x95\x9e\x43\x53\x4b\xc2\xf7\x23\x30\x91\x36\x0e\x11\x24\x23\xca\x2d\xb0\x76\xd5\x12\x19\x16\x08\x52\xfb\xb0\x84\xaa\x4c\x3c\xb4\x0d\xa0\x5e\xf9\x2e\xc8\x9b\x6f\xeb\x35\xa9\x88\x67\x8f\x02\xfe\x1c\x7e\xfe\x5e\x32\xa8\xbe\x51\x99\xa5\x41\x62\x45\x81\xb4\xda\x9a\x8b\xcf\xef\x0d\x60\x69\x71\xbd\xe7\xe2\x23\xd7\x0b\xdf\x55\x36\x04\x4f\x2a\xe2\x92\xfc\x5d\x1b\xab\x48\x9b\xc6\xbe\x7b\x8a\x28\xb7\x52\x14\x0e\xf8\xf4\x3a\x32\x97\xa3\x74\x45\xa5\x7d\x4a\xe3\xb0\xef\x4b\x7d\x6e\x20\xa7\x7b\x9f\xab\x85\x88\x1d\x25\xf9\xdc\x75\xd0\xa7\xdd\xcb\x62\x5c\xaf\x90\x61\x1f\xd6\x12\x2e\x97\x5c\xdf\x13\xa7\xb6\x6b\x39\x89\x4a\x90\x7e\x79\xdf\xd8\xee\x9c\x4b\x20\xde\xac\xdd\x51\x44\x8d\xb7\x70\xee\x8c\x4f\xbf\xc7\x5f\xbf\x61\x50\x05\xbe\x7b\x5a\x32\x6f\x72\xa4\x46\x12\xce\x9d\x49\x49\xbc\x20\x5c\xf0\x34\x5b\x66\x78\xef\x73\x5c\x99\x2f\x7a\x6a\x9e\x5f\x8f\x4d\x5e\x3a\xfb\x3d\xd9\x3e\x30\xa8\x17\x2b\x19\x1f\x03\x78\x52\x44\x0c\xbd\x33\x4b\x06\xd3\x3d\xf1\xde\xb6\x6f\xee\x6a\xf7\xb6\x0c\xf3\x97\xc5\xb6\x89\x0d\x0d\xf8\x44\x65\x56\x12\x0f\x09\x5f\xce\xcc\x98\xae\x28\x38\x1d\x98\x84\x2b\x13\x5a\xe0\x1d\xea\xc7\xb5\xa3\x7c\xf8\xf2\x34\xf5\x3d\xfb\x10\xc4\xc9\x4d\xae\xae\x38\x9a\x71\xeb\x40\x33\xeb\x40\xe1\xaa\x0c\x8c\x69\x4e\xb3\xc5\x16\xc5\x60\x3f\x5b\x75\xeb\x31\x99\x33\x49\x49\x83\xcd\x36\x46\xda\xfe\x50\x3f\xc7\xe3\x1d\xd2\xa6\x01\x8d\x51\x5e\x63\x6f\xf0\x6c\x3b\x9e\x65\x56\xca\xb4\xa8\xdd\x03\xa7\x11\x85\x7a\xe9\x4b\x78\x11\x70\xcc\xd7\x5e\x18\xce\xb4\xc9\xc7\xd7\x5c\xa8\x4b\x26\xfc\xe1\xc1\xd6\x74\xee\xf9\x7e\x3d\x3f\x8c\x1b\x6c\xc4\xe3\x02\x19\x96\x42\xdd\xe9\x81\x6a\xdf\xef\x63\x50\xdd\x11\x57\xf9\xed\xbb\xa3\xf4\xb2\xb7\x8b\x9f\xef\xf7\x77\xb0\x13\x23\xed\xd8\xc5\xd2\x6d\xfd\xda\x9a\x24\x7e\xac\x9c\x89\xb7\xd8\xa2\xac\x87\x89\x4f\xfb\xdd\x77\x3d\x2c\x6d\x98\x11\x45\x01\x4c\x4a\x5f\x52\xcb\x40\x52\x0b\xe2\x28\xc7\x80\xa7\xa5\xf0\x65\xbe\x04\xea\xd7\x35\xaa\xf1\x8f\xeb\x38\x9f\xc3\xb5\xab\xe4\x4c\x9b\x6c\xa8\x34\x3a\x52\x88\x01\x71\x17\x11\x72\x5e\x3b\x4b\xbf\xd6\xb4\xb6\xf9\xb1\x18\xe0\x2a\xac\x31\x03\x82\x0c\x6f\x98\xf6\x85\xab\x3b\xe2\xa5\x53\xca\x53\x50\xf3\x94\xa7\xe5\xda\xb3\x3f\x08\x3f\x45\xa4\xba\xe5\x6b\xed\xcb\x2b\x29\x7c\x37\x10\x18\x6e\x62\x23\x10\x95\x44\xc2\xc0\x84\xfb\xf4\x7d\x25\xf6\x2f\x7a\xb9\x4c\x39\xd2\xc6\xdb\xce\xfe\x92\x42\x5c\x12\xd9\xde\x22\xed\x55\x45\x2f\xe3\x9e\x4f\x97\x15\x70\x0c\x98\x37\x2d\x6f\xce\x6a\xb4\xeb\xb2\x96\xab\x7c\xee\xe2\x0b\x06\xcc\x6f\xf1\x13\x35\xb1\xce\xb4\x71\xbc\x04\x45\x3c\xa0\x89\x1b\x2a\x29\x82\x9f\x23\x5f\x5e\xd4\x9a\x79\xb5\xdf\xd5\x6a\x9f\xeb\xe7\xb5\x6b\x69\x57\x8d\xc4\xc6\x34\xa2\x99\xc5\x85\x3e\x33\xf8\xeb\x24\xb0\xe5\xbb\xa3\x03\x73\x15\x60\x7a\xc5\xcf\xb9\x9c\x8c\xfe\x41\xe5\x24\xec\x9c\x17\x06\x12\x2e\x09\xc4\xd5\xef\x18\x85\x66\xd5\xe6\xdd\x93\xad\x94\x72\xfb\x93\xdb\x48\xf8\xfe\x12\x70\x1c\x31\xa8\x7e\xfd\x56\xb2\x2a\xe2\xea\x80\xca\xe2\xfd\x38\xf6\xe0\x73\xdc\xc3\x6a\x4e\xe2\xf1\xb6\xf1\x2d\x55\xcf\xc4\x55\x92\x5a\xaf\x96\x20\xec\xbc\xdf\x5c\x6d\xf4\xe3\xba\xac\x5f\x07\x5f\xd2\x0b\xaa\x4d\x9a\xfe\xb1\xe2\x58\xf6\xbd\x69\x82\xe0\x34\x25\x5c\xad\xc8\x62\xb8\xd6\xd7\x1e\xf9\x99\x9b\xc8\x97\xa2\x74\xc6\xd9\x85\xb7\x02\x8f\x23\xb5\xae\x0d\x71\x95\x33\xf3\xac\x0f\x2a\x29\xc5\x3b\x56\x0f\x75\x8f\xea\xe9\x65\x8b\xbb\xa8\x22\xde\xe2\x0b\xde\x90\x31\xe4\x7b\x8f\xb3\x9e\x75\x26\xde\x14\xcc\xb8\x7e\x0e\x24\x5c\x31\x2d\xe2\xbe\x7b\x3a\x13\x67\x5c\x20\x4d\xd4\x8b\x44\x14\xa6\x09\x32\xae\x75\x38\x6d\xa8\x64\xa7\xbf\x63\xb4\x13\xf1\x98\x03\x71\x7e\xdc\xe6\x5c\xbd\xc5\x36\x89\x82\x78\xc2\x03\xae\xee\x45\x2e\x02\xd9\xae\xf0\xb5\x87\xc7\xd1\x40\xdd\x93\xc1\x7e\x3a\xb0\x17\xd0\xf3\xeb\x3d\x7d\xab\x73\x4a\xa5\x53\x3a\xcb\x26\xd5\x5a\xe0\x55\x43\xfb\x99\x33\x1a\xc2\x76\x68\x67\xd3\x03\x5d\x8a\xbe\x52\x84\x44\x3c\x3b\x37\x7d\xe5\x7f\x3e\x1f\xc3\x5f\x7f\x41\x02\xcf\x22\x0e\xad\x08\x51\x7a\x2a\xeb\xda\x86\x2d\x0f\xaf\x38\x7b\x6c\x63\x3a\x78\xfe\x95\x93\x82\x2f\x66\x35\x89\xa8\xab\x8e\x68\xb6\xe8\xf5\xaf\x62\x88\x1f\x97\x59\x69\xd5\xf4\x43\x44\xbc\xf0\x8e\x0e\x92\x8a\x4a\x40\x9c\xdf\x72\xc0\x10\xd8\x4f\x9f\x1f\x9f\xb9\xba\x33\xa7\x8c\x07\xf5\xb4\xe7\xcb\x8f\x34\xf5\x5b\x5b\x50\x6f\xf2\xe6\x40\xdc\xf7\x57\xed\xd7\xe0\x91\x96\x5d\xf0\x51\xc4\x48\x9b\xc4\xc4\x25\x87\x80\xaf\xba\xf6\xd5\xba\xce\x1d\x7b\x48\x7b\x90\xf7\xe4\x07\x79\xff\xc4\xcc\xd7\x79\x76\x80\x27\xb0\xc5\x87\xe0\x0b\xe5\x58\x46\xaf\xd3\x9c\x00\x65\x44\xdd\x69\x1a\xc4\x61\x7f\x2e\xbc\xe8\x63\xf2\x38\xe7\x83\xba\xf2\xad\xad\x28\x5e\x5c\x7d\x5e\x45\x69\xdf\xdf\x5b\xcd\x18\x1f\x66\xd2\x03\xdc\x1b\xf6\xc1\xac\x50\xd8\x68\xad\x33\x69\xcf\x5e\x82\x9a\xb7\x6d\x0c\xab\xd0\xac\x86\x67\xc2\xb5\xeb\x87\x5d\x2c\xcc\xf8\x09\x98\x50\xdf\x53\x19\x97\x4c\x4b\xee\xc4\xd9\xf8\x15\x05\xb2\x95\x06\xd9\xa2\xd1\x50\x13\x92\x88\x1a\xa2\xc6\xc7\x10\xf1\xd6\xfe\xda\x7b\x0b\x29\x57\x01\x82\xb8\xa4\x32\xce\xd6\x5a\x4f\x47\x44\x5f\xbe\xbd\x03\x44\x4d\x3c\xe2\xbe\x70\xe3\xe3\x28\xa7\x19\x3e\x77\xfc\xbc\xed\xbb\xc9\x0d\xf6\xdb\xbc\x38\xca\x91\x1a\xbd\x7d\xf7\x6c\x62\x0b\x04\x71\xcf\x6e\x66\x1f\x56\xb2\x2d\xf2\x9f\x7d\x99\x41\x5a\xbc\x2c\x99\x81\xfa\x76\x01\x1d\x59\x40\xcc\x83\xa4\xea\xdd\x1f\x7e\xce\xad\x88\x64\xa2\x17\x74\x7c\xbc\xd6\xb9\xe5\xda\x0f\xf4\xed\xa7\xb8\xd2\x39\x83\xf8\x86\x3f\x73\xa7\xd6\xd2\xbb\x71\x75\x30\xf6\x70\xbe\x6e\xfa\xc9\xf0\x9d\xa3\x57\x83\x6f\x67\x3d\x40\xab\xbb\x67\xc5\x3f\x3b\x4b\xe4\xdd\xae\x7c\xd7\x02\x33\x8e\xf7\x6b\xcf\xd6\x19\x17\xf8\x88\xea\x1e\x3d\xd3\x26\x62\xa6\x4e\xc5\x5f\x5a\x1d\x43\x31\x33\x12\xa7\x9d\xfb\x7a\xb8\x10\x77\x85\x8a\xb9\xab\x0e\xd7\x6a\x3d\xbd\x3e\x83\x35\x4c\xcf\xb3\x86\x1b\xd8\x66\x2e\xae\xde\x6b\x8c\xb7\xb3\xbc\x09\xf5\x84\x18\xd3\x34\x90\xdf\x06\xef\xdc\x9e\xd4\xfc\x3e\x70\xcf\x6c\xf7\xfe\x07\xbd\x7a\xe0\x8e\x02\xd4\xb9\xdb\xf3\x73\xf0\x2e\x73\x59\x3f\xe8\xa5\x57\x6c\x0e\xeb\xba\xae\x46\x04\xda\x15\xf1\xac\xf3\xcf\xf5\x5d\xff\x6f\xf4\xfd\x46\xf3\xae\xb5\x9b\xf1\x53\x4a\x39\x03\x6b\x6d\x1c\xcd\x9d\xf1\x71\x70\xee\xfd\xd6\x5e\x74\x8b\xdf\x9a\x1b\x8f\x74\xfe\xd1\xdd\x31\x6a\xf2\x21\x38\xe9\xb7\xbc\x0f\x07\x7a\x6a\x3b\x43\x0d\x61\x3c\x13\x78\xc0\x05\xd3\x04\x07\x6d\x87\x78\xd6\x88\x1a\x8b\xed\x7d\xed\x48\x1a\xec\xce\xc6\xed\x4c\xc6\x60\x94\x07\x95\x12\x0f\xcd\x5c\x73\x67\xc2\x99\xab\x6c\x18\x4c\x0f\xf4\x32\x8b\x16\xa8\xd1\xda\xf4\x8f\x7e\xef\xb9\xd4\xcf\xda\x12\xd7\xda\xdd\xcb\xe5\xe7\xdc\x36\x30\x17\x45\x9b\xb5\xb8\xd3\x57\x4a\xc1\xe0\x6a\xfb\xf6\x7f\xeb\x55\x78\x15\x70\xbd\x0c\x24\x52\x6b\xed\xa7\xfd\x70\xfe\x02\xc2\xb7\xef\x7b\xd6\xc3\xff\x03\x98\x55\xb1\x13\xab\xa3\x55\x5d\x5b\x4b\x06\xf5\x8a\x69\xe3\xdd\xf5\xbb\x01\x3e\xc5\xbe\x67\xe5\x3e\x18\xda\x5f\xe7\xbb\xd6\xcf\xe1\x9c\x3d\xe4\xfe\xd5\x66\x87\x73\x42\x0f\x95\x33\xe1\xb8\x42\xaf\xb8\x24\xf7\xfc\x12\x39\xc8\x40\x6e\x1a\xf6\x76\xed\xbd\xe5\xbf\x8f\x35\x56\xfe\xf6\xf4\xaf\x7f\x07\x00\x00\xff\xff\x46\x24\x72\x7c\x3c\x15\x00\x00")

func bchainMdBytes() ([]byte, error) {
	return bindataRead(
		_bchainMd,
		"bchain.md",
	)
}

func bchainMd() (*asset, error) {
	bytes, err := bchainMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bchain.md", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _systemMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\x5f\x6f\x9b\x30\x14\xc5\xbf\x0b\xcf\xd3\xe4\x40\xd0\x94\x49\x7b\x48\x9c\x60\x8c\x5b\x77\x18\x05\x6c\xbf\x4c\xc1\x8e\x1c\xc2\x3f\xaf\x8c\x66\x64\xda\x77\x9f\xc8\x9f\x46\xdd\xd6\x4a\x7d\xb8\x12\xc2\x3e\xf7\xfe\xce\xf5\xf9\xe5\x14\xcd\x8f\xed\xe3\xb7\x66\x53\x6f\x9d\xcf\xce\xbe\x7b\xdc\x7e\x8c\x12\xb6\x72\x3e\x38\xaa\xd5\xe3\xaf\x65\x6c\x5d\xc1\xb1\x11\x1e\x9b\x0a\xbe\xb0\x78\x09\x4e\xdf\x31\x5f\x58\x02\xcb\x4f\xcb\xb8\xa5\x70\xdf\xb5\xb2\x49\x7b\xe1\x31\x9b\xbb\x53\x43\x60\x69\xb6\x07\x40\x96\x71\x6b\x30\x9c\x1b\x8d\x76\x56\x0d\xfe\x5e\xd5\xe9\x4e\xa3\x74\x99\xbb\x3e\x50\x75\xb0\xd7\x70\x3e\xc3\x48\x4e\xf2\x9a\x82\x4d\x36\xeb\x09\xa2\x4f\x12\xad\xed\xa8\x1d\x75\xe7\x5a\xec\x75\xb8\xdb\x29\x54\xf6\xc2\x9d\xf5\xca\x9d\x75\x32\xf1\x0f\xaa\xae\x7a\x0d\x4d\x41\x8a\xf6\xfb\x58\x78\x45\x07\x99\x05\x40\xae\xe9\x53\xde\xb0\x41\x64\x14\xe0\x80\x02\xc1\x23\x80\xe1\xf9\x0e\x29\xb0\xbd\x32\x9d\x0a\x9d\x35\xb9\x87\xcd\xd7\xe4\x36\x87\x7b\xb4\xca\x6b\x56\x29\xf3\x92\xe3\x99\x7b\x15\x94\x32\x8c\x2a\xe5\xdd\xbf\xd0\x8d\x7c\x3a\x8c\x76\xc2\x8b\x7b\xe1\x45\x95\xe0\xac\x22\xb7\x19\x1d\xbe\xf8\xfb\x8b\x01\x6c\x51\x70\xd8\x24\xfe\xd8\xff\x98\xbb\x3f\xab\xbb\x66\x31\x6c\x32\x1f\x10\x18\xbd\xd9\xfb\xa1\xc0\x86\x0c\xff\xe7\x22\xc3\xbc\xe0\x68\x5a\x90\xf8\xf5\x5d\x5e\xfb\xc9\x6c\x62\xf5\x2a\x75\xe5\x65\xe6\xbf\xef\x84\x3b\x1c\xb2\x41\x67\xeb\x93\x87\xeb\x7e\xe3\x8c\x95\xaa\x4e\x8f\x6a\x38\x18\x59\x07\x9d\x72\x5f\x3f\xd7\x61\x34\x91\x49\x49\x61\x31\x7f\xf6\x7e\xcd\xd4\x5d\x33\x32\xa7\x9d\x86\xfe\x51\x72\x96\x48\x4e\x27\x79\x18\xb7\x37\x46\xb6\x90\x88\x0d\x92\xd3\xe3\x5b\x7e\xde\x95\x8d\x55\xda\x4b\x38\xbf\xe4\xa2\xbd\xed\x29\x04\x14\x36\xc0\x92\x90\xb5\x1b\x7e\x6f\x1f\xce\x39\xfe\xe2\xfc\xfe\x13\x00\x00\xff\xff\x3a\x5b\xf1\x40\x2c\x03\x00\x00")

func systemMdBytes() ([]byte, error) {
	return bindataRead(
		_systemMd,
		"system.md",
	)
}

func systemMd() (*asset, error) {
	bytes, err := systemMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "system.md", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pledgeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x5b\x93\xa3\xb8\x15\xfe\x2f\xfd\x9a\x54\x22\x83\xc9\x8c\xf3\x06\xd8\x16\x82\x06\x37\xd8\xe6\xa2\x97\x94\x25\x79\x04\x6d\xc0\xa4\xdd\x18\xe3\x54\xfe\x7b\x0a\x1b\x73\x6b\x7a\xb2\x49\xcd\xd6\xce\x56\xed\x03\x55\x74\x5b\x1c\x7d\xe7\xf2\x7d\x3a\x47\xff\x7a\x8a\xd2\xf7\xfd\xdb\x3f\xd2\x5d\xb2\x7f\xfa\xfb\xd3\xeb\xe9\x6d\xff\x17\x7d\xed\x2c\x9e\xfe\xfc\x44\x8f\xac\xfa\xd7\xdc\xce\x84\xc0\x47\x3c\x10\x9d\x69\xe0\x2b\x19\x9a\x83\xdb\xbb\xed\x2b\x99\xa1\x1e\xbe\xcc\xed\xa3\xa5\x26\x78\x42\x12\x0b\xec\xbc\x59\x8e\x20\x8b\xd9\x42\x0a\x89\xb7\x3d\x1a\xfe\xc9\x52\x23\x99\x23\x55\x29\xb1\xef\x4c\x68\x32\xe5\x28\x55\x4e\xd8\x73\x52\xbc\x46\x96\x9a\x02\x4b\xe5\xc0\xc0\xa9\x9b\x07\xa2\x93\x11\x61\xca\xb1\xe0\x02\x37\x71\x4b\x2a\xc4\x67\x12\xf1\x6c\x5f\x00\x03\xa9\x32\x47\x9a\x1e\x33\xcd\x2d\x49\x24\x47\xee\xab\x9c\x9b\xea\xf4\x82\x38\x30\xbe\xd9\xc0\x98\xdb\xc7\x2f\x06\xec\x60\x50\x79\x86\xb4\x66\xef\x1b\x7e\x0a\x2f\x31\x86\x2c\xde\x6a\x7a\x8c\x93\x78\x5a\xf9\xd1\xc3\x32\xb2\xd6\x85\x33\x10\x78\x05\x7f\x59\xcb\x91\x2f\xd6\x6b\x5d\xe7\xcc\xe0\xf2\x54\xed\x3d\xb7\x8f\xbc\xc2\xd6\xc5\x4f\x45\xa7\x74\xe1\xcc\x24\x22\x8b\x69\x14\x16\x81\xaf\x87\x64\x1d\x7f\x79\xac\xed\xfb\xa2\xd4\xbf\x4b\x80\x80\xcb\x99\x09\x6e\x69\x0b\xcb\x2b\x5e\xf3\xec\xb1\xbe\xf6\xef\xc3\x3e\x81\xe7\x1c\xee\xf8\x2e\x36\x81\xee\x01\x0b\xdb\x63\xe0\x4d\xce\xcc\x93\x40\x1b\xf7\xfb\xc3\x92\x65\x89\xb4\x3b\xee\xad\xe8\x94\x8f\x1c\x56\xf9\x7c\x4e\x9c\xe8\x39\x61\x31\x53\xc3\xe2\x6e\xc7\xdd\x12\xd1\x09\x89\x7a\x18\xb1\xa1\xd4\xbf\xc9\x33\x04\xa5\x98\x95\x8a\xba\xf3\xd8\x8a\x79\x93\x08\xfb\xe8\xc8\xee\x78\x36\x4c\x43\x39\x81\x6e\x8e\x45\xe7\x88\xe6\x53\x6e\xaa\xf2\x5f\xfb\xfb\x1f\xb9\x39\xb0\x4f\x97\x75\x5c\xe7\xa0\x79\x7f\x4e\x95\x13\xf3\xcd\xd6\x2f\xbb\xae\x85\xdb\xa3\xbc\x32\x2d\x0c\x29\x3c\xe4\x18\xa2\x9c\x0a\x2e\x30\xb4\x7e\x8e\x9e\x55\xa5\xa8\x73\x98\x33\x38\xdb\x30\x4d\xcf\x48\x42\x8f\xc6\xfa\xb1\xb7\x32\xbb\xd5\xef\xfd\x3d\x61\x9e\xf4\xca\x60\x55\x77\xca\x95\x79\xfa\xdd\xd7\xe5\xa3\x46\xc2\x90\x78\xb3\x09\x49\xed\xb6\x26\xd5\xb6\x66\x3a\xbe\xf3\x97\x75\x1f\x1b\x1e\xc1\x36\xf0\xe5\x5e\x77\x9d\x18\x90\xc4\x15\xd1\x42\xcf\x30\x90\x26\xc4\xd3\xab\x5a\x02\x77\x3c\x16\xa0\x91\x74\xc2\x9e\x94\x32\xc8\xf9\x4b\x24\x17\x68\xfe\xb5\xb7\xff\x2a\x92\x8b\x81\xfd\x0c\x47\xf2\xb1\x89\x6b\x72\x01\x06\x5c\xbe\x13\xd1\xcd\x99\x7a\xe8\x70\xa5\xf3\x40\x0b\xec\xe1\xb2\xd8\xad\xa5\x90\x8a\x56\x4c\x53\x3b\x0f\x7c\xeb\x8a\x7d\x1d\x18\x10\x87\x44\xb3\x62\xa4\x16\x1c\xa5\x35\xe6\x87\x7f\x6b\x25\x0a\xbc\x4b\x48\x12\x2b\x46\x30\xbe\x22\x28\x9d\x99\xaa\xc4\x24\x99\x4d\xb0\xc0\xa3\x01\xae\x59\x9f\x17\x9d\xfa\x6a\xde\xa5\xf7\x9d\x27\x4d\x68\xd9\xc6\xbf\xf7\x4d\x8b\xf3\x10\x44\xd2\x15\xfb\xf6\x71\xc0\xdf\x53\xc7\x16\x20\x13\x0b\xd0\x24\xce\x71\xc9\xb3\x06\x8b\x76\xd7\xa1\xbb\xbd\x8e\x8e\x34\x3e\x85\x09\x4d\x66\xef\xb6\xe7\x1c\x68\xe2\x5e\x69\x59\xf0\xa6\x26\xd7\xca\x80\xdb\x38\xa4\x91\x72\x5b\x7f\xab\xe5\xbe\x1e\x0c\xec\x8c\x72\xac\xae\x93\x2a\xcf\x15\xcf\x7a\xfe\xa5\x95\x7f\x38\xd5\xcf\x64\x2d\xbf\xb5\x6b\x95\x12\x7b\x38\xdb\x8f\x73\xb6\xf6\x61\x9c\xb3\x8d\x2e\x8a\x4e\xf9\x9c\x5c\x62\x92\x30\xb0\x53\xe5\x3f\xa1\xb9\xcc\x5f\x4a\xe5\xa1\x09\xbd\xba\x1a\xe4\xac\xb5\xdf\xbc\x4b\x05\xd1\xdc\x6b\xa7\xc6\x7a\xb8\x7a\xda\x93\x5a\x95\xf6\xdc\xe3\xa5\x9e\x3e\xe8\x74\xc5\xe1\x5a\xdf\x3e\xe1\x70\x6d\xf3\x7b\x7a\xf8\x5f\xf3\xac\xc7\x18\xba\x31\xf9\x23\xcf\xdf\xd7\x8f\xda\xc6\x8f\xd5\x8f\xff\x5b\x37\xfa\xe7\x47\x8d\xed\x96\x8b\x06\xe7\x24\x23\xe9\x8f\xa9\xc3\x0a\x6b\x63\x37\x75\xce\x55\x1c\x77\x9e\x94\x1a\xea\xa1\xaf\x47\x9a\x35\x09\xe2\xfa\xac\xab\xd7\x7f\xdc\xbf\x77\xee\x80\x1d\x8c\xaf\xcf\x69\x37\x7f\x6d\x6d\x1a\x9a\x73\xde\x09\x6e\x4e\xcb\x61\x0f\x71\xab\xbf\x87\x26\x56\x67\x4e\x8e\x7d\xca\xed\x24\x4e\x37\xa9\xfb\x1e\x24\x6e\xd9\x7e\xdb\xf7\x7b\xe7\x05\xbc\xc5\x24\x9d\x18\xdc\x1e\xcd\x1f\x97\xc7\x16\xd3\x1c\x70\x53\x45\x83\xf8\x80\x4f\x72\x60\x9d\x49\x6a\x9d\x09\xdc\xe6\xb4\xe2\x78\x6a\x1f\x51\x04\xde\x9f\xd7\xed\xd3\xe4\x18\xe2\x92\x08\xe0\x6f\x28\x92\xdf\x3a\xf8\xbe\x51\xc1\xcd\x31\x74\xcb\x2a\x7f\xa8\x13\x9b\xfb\xba\x87\xbf\xf2\x1b\x52\x75\x4a\xa2\x21\xae\x46\xeb\x9b\xb3\xdb\x17\xad\x98\x24\x4e\x4c\xa3\x8e\x0e\x0c\xf5\x4f\xfd\x7a\x46\x70\xf2\x4f\x22\x1e\x9a\xfa\xe8\xdb\x75\xce\x23\xfa\xd0\xee\x21\x54\x7e\x3b\x65\xe0\x59\xc3\xfe\x06\xd0\x64\x99\x53\x01\xc7\xf4\x50\xd5\x83\x79\xeb\x43\x83\x64\x79\x0a\x3c\xe9\x15\xbb\xd5\x37\xd2\x15\x57\x79\x56\x69\x54\xf9\xcc\xe0\x57\x6e\x94\x72\xa4\x97\xc5\xed\xef\x4e\x8e\xc1\xce\x9b\xc4\xb4\xe4\x17\xbc\x3e\x5d\x56\xea\x21\x1b\xd4\xf0\xed\x3b\xa3\xe9\x83\x3f\xe4\x26\x24\xb0\xc8\x03\x61\x79\x22\x2a\x8f\x4c\x8d\x5f\x56\x1b\xfd\x60\x6d\xf4\xc5\x0a\x5a\x4b\x13\x9a\x62\x70\xd0\x15\xfc\x2a\x8b\xab\xb9\xb2\xb4\x3d\x54\x58\x73\x2e\x98\x0b\x5b\xb0\x93\x45\x61\x6e\xd0\xc4\xba\x86\x2a\x8a\x0a\xce\x34\x3d\x24\xa9\x95\x60\x5f\x87\x55\xbf\xd5\xd1\xe6\xd3\x47\x4e\x3c\x74\xf9\xf7\xca\x89\x07\xfe\x5f\x91\x13\x89\x7b\xc0\x9e\xfb\xfe\xeb\x70\xa2\x39\x17\xff\x67\x4e\x10\x2f\x3b\xef\xd7\xd5\x79\xe5\xc4\xd8\xeb\xfb\x57\xd5\xe9\xcb\x5a\xb9\x32\x4d\xdf\x3e\xe6\x1e\x63\x04\xf3\xcf\xce\x87\x9d\x27\xe5\xd8\xd7\xe7\x81\x77\x39\x19\x2a\x2a\xf6\xf3\x85\x64\x26\xf6\xc4\x3c\xd8\xd3\x00\x6c\x8b\xe0\xca\x22\xfb\xb0\x4c\xcc\x39\x9d\x9a\x0b\x57\x09\x5e\x65\xb0\x9a\x07\x85\x33\xc7\x6a\xb0\x91\x2f\xe6\xeb\x56\x5c\x2d\x50\xf4\xfc\xd1\xb7\x76\xfe\x5b\x17\x6d\xcf\xa2\x39\xc7\x9d\x6f\xe6\x0f\x9d\xd9\x08\x41\x15\xc7\xce\xdc\x12\x86\x18\x3a\x25\xf6\xad\xeb\xe8\x0c\xb8\x9c\x35\xbf\x8f\x68\x52\xfb\xed\xd8\x6c\xd2\xe9\x1f\x3e\x99\x1f\xbf\x05\x4d\xbf\xf3\x53\xf4\x2c\x4d\xcd\x06\xc2\x2c\xa7\xc2\xec\x54\xf5\xa5\x55\xef\xcf\xd4\x8e\xaf\x25\xea\xf5\x0e\x37\x5e\xb4\xb8\xc6\x79\xd1\xd6\x6a\x65\x63\x42\x34\xfb\x36\x7f\x6e\x13\xf7\xca\xbc\x4b\x3b\xeb\xad\x7b\xf3\xc6\xc5\xec\xf4\x0a\x63\x79\x65\xfd\xfe\x75\x90\x5b\x3e\x3a\x77\xfe\x82\xbc\xfc\x92\xb9\xfe\x37\xca\x03\x8f\x58\x7d\xc7\xf2\xb3\xe4\xa0\xe5\x16\x5e\xee\x35\xfb\x0f\x7e\xfd\xfe\xf8\xf5\xf9\xbd\xd5\xf2\xf3\x59\x6b\x70\x67\x90\x8d\xf4\x15\x45\x7b\x1f\x38\xd6\x57\x74\xf7\xf8\x78\x3f\xf3\xb8\x7b\xf9\xec\xfe\xeb\xbb\x67\xfe\x87\x3b\x16\x79\x86\x54\xc4\x8d\xb2\xc5\x54\x9d\x57\x3e\x9c\x0e\xe7\xa4\x26\x47\xb4\x8e\xdd\x6d\xce\x59\xea\x31\x15\xdd\x53\xa5\x0d\x63\xf7\x63\xe6\x46\xee\xdf\x8d\xa4\x20\x33\xee\xfc\xc8\x56\x05\x30\x9e\xfe\xfd\x9f\x00\x00\x00\xff\xff\x44\x2f\x8d\xbc\x38\x16\x00\x00")

func pledgeMdBytes() ([]byte, error) {
	return bindataRead(
		_pledgeMd,
		"pledge.md",
	)
}

func pledgeMd() (*asset, error) {
	bytes, err := pledgeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pledge.md", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"consensus.md": consensusMd,
	"bchain.md": bchainMd,
	"system.md": systemMd,
	"pledge.md": pledgeMd,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"consensus.md": &bintree{consensusMd, map[string]*bintree{}},
	"bchain.md": &bintree{bchainMd, map[string]*bintree{}},
	"pledge.md": &bintree{pledgeMd, map[string]*bintree{}},
	"system.md": &bintree{systemMd, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

