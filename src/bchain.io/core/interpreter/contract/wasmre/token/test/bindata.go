// Code generated by go-bindata.
// sources:
// ../token.wasm
// DO NOT EDIT!

package test

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _TokenWasm = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x95\xc1\x4e\x1c\x47\x13\xc7\xab\xab\x67\x86\xd9\x6d\xaf\xe9\x0f\x63\xfc\x19\x45\x4a\x7b\x4f\xf6\x0d\x47\x0a\x38\x39\xd1\x28\x58\x24\x07\x07\x85\x9b\x2f\xcb\xb0\xdb\x90\x5d\x76\x67\xc9\xcc\x90\x18\x29\x61\xc7\x49\x0e\x28\x42\x09\x97\x9c\x72\xe1\x96\xd7\x18\x5f\x13\xa4\xa0\x3c\xc1\x2a\x07\x9f\xfd\x08\x51\x4d\xcf\xce\x0e\x04\x4b\x16\x87\xee\xaa\x7f\xd5\xaf\xaa\x6b\x7b\x1a\x08\xe2\x41\x03\x00\xd8\xab\x34\x4d\xa1\xbe\xcd\x46\xb0\xcd\x46\x6c\xb4\x8d\xa3\x11\x6c\xf3\xd1\x88\xf6\xce\x68\x44\x96\x4b\xcb\x71\xbe\x1e\x4f\x54\xc8\xc5\x63\x5a\xc8\x87\xbf\xbd\x24\x0c\x37\xe1\xd7\x8d\xa0\x9d\x74\x87\x61\x2b\x36\x61\xc7\x44\x00\xe4\xf3\x82\x38\x36\x51\x02\x48\x46\xbd\xb3\xd3\x32\x83\x83\x7e\xd0\x36\xe0\xe4\x6a\x67\xa7\xb5\x67\x12\xe0\x13\x23\x36\x89\x55\x44\x64\xbe\x3a\xec\x46\x46\x1f\x26\x5f\x02\x23\x4f\x2d\x36\xc9\x17\x26\x3e\xec\x17\xb0\x5a\x9c\x44\x1f\xf4\x87\xdf\x4c\x2a\xf9\x71\x12\xf5\x86\xdd\x70\x42\x8b\x93\xa8\x6f\x42\x60\xfc\x17\x3a\xe7\x6d\xd7\x9b\x41\x44\xf4\x6b\x08\x00\xe0\xfc\x48\x4e\x76\x00\xe0\xfe\x90\xef\x80\xcd\xfc\xfa\x7d\x9a\xc2\xac\x37\x30\x83\x61\x74\x84\xf0\xff\xd6\xf3\x67\x1f\x26\xc3\x7d\x13\x2e\xb7\x23\x13\x24\x66\x7d\xb3\xbd\xb5\xd4\xea\x1e\x41\xfd\xbd\x52\x7a\x92\x44\x41\x18\xef\x9a\x68\x7d\xb3\x7d\xb4\xb5\xd4\xda\x5a\x6a\x81\xb8\x5f\xca\x1f\xed\x04\xfd\x20\x6c\x9b\xcf\x77\x6d\x32\xdc\x5a\x98\x6a\x7b\x26\xd9\x3a\x3c\x38\xe8\x1f\xad\x6f\xb6\xa1\x31\x4d\x7a\xfc\x78\xcf\x24\x9f\x98\x76\x77\x10\xf4\x63\xd2\x6e\x5f\x4b\x3a\x1a\xec\x0c\xfb\x24\xcc\xce\x97\xc2\xca\x9e\x49\x9e\x05\x03\x6a\x12\xa4\x67\x1b\x86\xff\xf9\x93\xf6\x60\xae\x56\xb6\x02\x77\x6a\x65\x69\x98\x17\x95\x62\x70\xb7\x56\xf2\x61\x61\xa6\x40\xc2\xbd\xda\x4b\x9a\x11\xd4\xff\x3e\xa1\x49\xfe\x43\x73\x62\x6c\x84\xab\x1a\x34\x3c\x44\x47\x5f\xb2\xfd\xa6\xbb\x8c\x8e\x72\x15\x5f\xc6\x0b\xa6\x5c\xe5\xac\xf0\x8c\x29\x57\x9f\xb1\x9e\x84\x62\x75\x17\x15\x93\x35\x9d\xc1\x86\x96\x92\x29\x2c\xf6\x4b\x92\x02\x65\x4f\x67\xa0\xec\x4e\xfa\x8a\x51\xa8\x44\x2b\x5c\x56\x04\xa4\xbc\x89\x30\xae\x08\xae\xbe\x60\x3d\xed\x4c\xa4\x37\x57\xa4\x8c\xf5\xb4\x4f\x92\x72\x1f\xf1\x8c\x35\x9d\x15\xee\x2b\x67\xed\xc9\xc9\xef\xfa\xfe\xa7\x3a\x65\x92\xe1\xaa\x72\x1f\xe2\x05\xd3\x6c\xa3\x01\x74\x80\xb5\xfa\xf1\xb5\xb0\x73\x46\x9d\xe6\x41\xb8\xd1\x00\xcd\x1e\x20\x5f\xb5\x48\xff\x2d\xd1\xa8\x59\xaf\x89\x36\x69\xa3\x01\x42\xe4\x2d\xa9\x62\x32\xd3\xfe\xfc\xbc\x3d\x4d\x93\xba\x64\xbd\x65\x74\x84\x78\x4d\xdf\x15\xc3\xca\x98\x33\xdc\x6f\x7a\x34\x66\x4f\x9f\x21\x8d\xd5\x23\x08\x8d\x8d\xdb\xad\xf4\x15\x97\x5c\xc3\x67\x3a\xa3\xe2\xde\x1a\xac\xf0\x13\x66\x35\x1b\x83\xbd\x49\x64\xd3\x55\x9e\x3e\x61\x3d\xc9\xb5\xff\x54\x8f\xf3\xf8\x47\x14\x8d\xcf\x75\x8a\x64\x4d\xec\xef\x2a\x90\x22\x49\xfb\xd2\xb1\xf8\x94\x7e\xa8\x19\xe5\x29\xae\x98\xf2\xa4\xdf\xa4\x32\x29\x61\x17\x2d\x21\x65\x0a\xbf\xcd\xe3\x3c\x55\x68\x94\xad\xa9\xfb\x0c\xed\x51\xff\x4c\xaf\xdf\xa8\x33\xb6\xdf\xe4\x74\x54\x5e\x9c\x81\x8a\x70\x85\x8a\x29\x4e\xa7\xb4\x9d\x2f\xda\x8d\xf6\xa5\xa7\x41\x71\xea\x30\xe7\xfd\x75\x23\x0f\x89\x87\x05\x0f\xed\x05\x41\xba\x51\xd3\x31\x9c\x63\xfe\x9b\x4d\x99\xf8\x4e\x4c\x0d\xcb\x78\x4a\x89\xe3\x29\xf3\x34\x67\x3a\x4f\x75\x66\x99\xa7\xf9\xe5\xbc\xca\xfc\xe3\x3f\xcc\x6c\xca\xcc\xa6\xac\x7c\x9e\x4d\xa6\x5f\xc1\x86\x1e\x5b\x5c\xca\x7a\x8a\x15\xb8\xec\x5d\x70\x97\x37\xe3\x52\xfe\x56\xdc\xcf\xf9\x47\xaf\xe8\x8f\x29\x54\x5c\xd6\xaf\xbb\x40\x0a\xf1\x53\xc5\x25\x6f\x89\x93\xd2\x94\x8d\xaa\x71\xbb\x6a\xcc\x56\x0d\x29\xc4\x6b\x7a\x51\x24\x68\x47\x38\xe7\x1a\x00\xb4\x14\x73\x71\xfe\x0a\xa9\xbe\x09\x95\x79\xd1\x36\xa6\x03\xa0\x97\x84\x0c\x83\x81\xb9\xea\xcc\x40\xf8\x45\x30\x80\xbe\x04\xe1\xe5\x31\x00\x7a\x0c\xa2\xde\x29\x9e\x36\xb2\xdf\x50\x64\xfe\xec\x91\x95\x32\x31\x9f\x0c\x93\xa0\xaf\x0a\x5f\x49\x3c\x67\xe2\xee\x0d\xca\x03\x2a\xc6\xc4\xfb\x93\x37\xf5\x63\x55\x94\xed\xc6\x2a\x1c\x26\xca\xbc\xe8\xc6\x09\x05\x8d\x99\xb8\xb7\x67\x12\x65\xff\x0f\xaa\xfc\x7d\x56\x26\x8a\x86\x11\x95\x45\x71\xa7\x1b\xc6\x87\xbb\xbb\xdd\x76\xd7\x84\x89\x95\xa9\x2a\x8a\xf9\x3c\xcb\xd6\xec\xec\x94\x29\x19\x8a\x05\x52\xca\xb3\x54\xb4\xf1\x24\xcb\xb6\x52\x51\x52\x2e\xe6\x48\xc9\xa7\x51\xfa\xff\x0d\x00\x00\xff\xff\xd3\x4f\x74\xd4\xfe\x07\x00\x00")

func TokenWasmBytes() ([]byte, error) {
	return bindataRead(
		_TokenWasm,
		"../token.wasm",
	)
}

func TokenWasm() (*asset, error) {
	bytes, err := TokenWasmBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../token.wasm", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../token.wasm": TokenWasm,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": {nil, map[string]*bintree{
		"token.wasm": {TokenWasm, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
