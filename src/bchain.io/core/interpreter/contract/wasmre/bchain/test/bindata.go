// Code generated by go-bindata.
// sources:
// ../bchain.wasm
// DO NOT EDIT!

package test

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _BchainWasm = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xd6\x7b\x50\x54\xd7\x1d\x07\xf0\x73\xce\xbd\xbb\xde\xe5\x02\x5e\x8c\x4a\x30\x62\x0f\x3b\x69\x7c\xb4\xf1\x41\x23\xea\x64\xac\xde\x45\x44\x5b\x63\x10\x1d\x35\x8a\x03\x0b\x5c\x70\x17\xd8\xd5\xbb\x0b\x48\x05\x76\x35\xd1\x92\x88\x06\xd3\x5a\x8d\xc6\x48\x13\x1f\x49\x3a\xc6\x34\x36\x36\x51\x34\x2b\x76\xd4\x4e\xac\x52\xeb\x34\x6a\x46\xc5\x68\x6c\x95\xa6\xa6\x55\x3b\x79\xf4\x35\xe7\x7b\x76\x85\xa6\xfd\xa7\xe3\x1f\x9f\xfb\x3b\xbf\x73\x7e\xe7\x75\xbd\x0b\xf1\x86\x6a\x52\x08\x21\xf4\x40\x34\x1a\x25\x49\x25\x2c\x12\x21\x25\x34\x42\x23\x25\x34\x42\x4a\x94\x48\x44\x3c\xaa\x91\x88\x68\x26\x44\x3c\x35\x47\x48\x09\x8b\x34\x8b\xa4\x78\xa4\xcd\x84\xed\x5a\x25\xc6\x2a\x56\xa0\x2e\xc5\x5b\x16\xf6\x05\x03\xc5\x21\x2b\x50\x6e\xd9\x84\x89\x36\xa7\x37\x14\xb2\xec\x30\x21\x22\x48\x2d\xad\x0e\x96\x55\x15\x2f\xb3\x83\xe5\xb5\x65\xf7\x7b\x94\x97\x16\x57\x5a\x61\xa2\x24\x82\x90\x15\x26\xaa\x08\xd2\x6c\x6b\x79\xad\xcf\xb6\x0a\xad\xfa\xa0\x5d\x6e\xd6\x86\x97\x12\x87\x68\x77\x85\xac\x70\xa1\x15\xaa\xad\x8e\x97\x75\x85\xc2\x76\x76\x75\xb0\x3e\x51\x51\x0b\x85\x6d\x7f\xd0\x17\x48\xd4\x0c\x85\xed\x6a\x2b\x40\xa8\xb2\x51\x6c\xd3\x70\xb2\x7e\x84\x31\xc6\x34\x87\x8b\x39\x1c\x0e\x87\xfa\x8c\x68\xa6\xcb\x08\x71\x3c\x8d\x27\x42\xfb\x1d\x58\x1d\x8d\x92\x34\x67\x8d\x55\x13\xb4\x1b\x18\x19\x52\xbc\x68\x76\x4e\x69\xd9\x52\xaf\x2f\x30\x31\x6c\x7b\x03\xa1\x0a\xcb\xce\x2b\x28\x6b\x98\x3b\xb6\x98\x24\x3d\xd0\x9b\xcc\xb1\xb1\xd4\xbc\x3a\xa2\x67\xf4\xb6\x8e\x1b\x97\x18\x33\xdd\xb2\xf2\x1a\x48\x72\x7a\x6f\x6e\x52\xa9\xb7\xda\x0a\x94\x59\x4f\x56\xe4\x15\x94\x91\x94\xc1\x7d\x32\x95\x56\x78\x6e\xed\xb2\x65\xd5\x0d\x79\x75\x24\xf5\x3f\xca\x55\x5a\xe1\x69\x56\x99\xaf\xc6\x5b\x1d\xca\xab\x23\xfd\xbf\x3e\xa8\xa1\xa6\x34\x58\x9d\x57\x47\x8c\x81\xbd\x89\x09\x95\x56\x78\xb6\xb7\xc6\xca\xab\x23\x69\x5a\x62\x39\x64\x80\x53\x2e\x98\x3c\xa0\xf7\x59\x22\x19\xe8\xba\xbf\x2a\x32\xc8\x75\x7f\x1d\x64\xb0\xde\x67\x66\x92\xee\xba\x3f\x19\x79\xb0\x5f\xbc\x3e\xc9\x70\xad\x12\x87\x48\x92\x36\xb6\x88\xc3\xfe\x50\xbc\x1d\x94\x46\xd8\x54\x93\x98\x64\x04\x53\xcd\x2e\x56\xe5\x56\x73\x98\xca\x15\xc3\x65\xf2\x19\xa6\x61\x50\xae\x9a\xed\xcc\x6f\x10\xae\x7a\xc8\x04\x65\x0b\x62\xea\x37\x63\xf1\x84\x0c\x0d\xcd\xad\x70\xd5\xdc\x42\xfd\x86\x62\x6a\xd3\x4d\x2e\xc6\x8d\x14\xbd\xd9\x22\x33\x46\x44\x94\x88\x9b\x7a\x8b\xf0\xf8\x18\x53\x33\x54\x59\x5e\xe3\xd4\xe8\xc7\x55\xd3\xc0\x04\x14\x4f\x86\xe6\x16\x0f\x9a\xdf\x50\x86\xc8\x32\x1a\x67\x8d\xa2\xaf\xc8\x72\x99\x13\x25\x4c\xc2\xc5\x0e\xfc\x39\x4c\xd5\xf5\x6b\x62\x6f\x8c\x45\x58\x73\xef\xee\x62\xb4\xca\xcd\x72\x98\x6a\x38\x38\x33\xdb\xa8\xdf\x60\x9c\x89\x59\x0d\xb3\x8b\x9a\x5d\xd4\x70\xb9\x29\x67\x62\x46\x65\x08\x67\x9c\x8d\x54\x0c\x0f\x6d\x94\x69\x2e\x33\x58\xa9\x48\x64\x29\x72\xa8\x26\x9b\x63\x54\x56\x94\xc3\x35\xd4\xc1\x82\x3d\xd1\xd8\xa7\xab\x2f\xde\x59\xaf\x64\xa9\x6c\x2a\x57\x3c\x74\x4e\x0a\xf1\x90\x2c\x95\x2b\x9e\x7f\x75\xf7\xa4\xcf\x4f\x21\x5c\xf1\xb4\xfd\xb4\x7f\x74\x8f\xa9\x84\xcd\x6e\xea\x1f\xa9\x90\x2c\x55\x97\xd3\x6b\x5c\x6d\x4c\x4c\xc1\x65\xc9\xf8\x3e\x99\x19\xa3\x72\x9f\x57\x70\x87\xac\xcf\x1d\x46\x95\x2a\xb7\x22\xee\x90\x7a\x48\xa1\xd9\x2d\x0e\x5f\x11\xc7\x62\x30\xae\xc4\xaf\x52\xc1\x55\x8a\xb8\x4d\x5e\x25\x12\x32\x34\x34\xb7\x48\x6c\x61\xf1\xab\x8c\x52\x51\x60\xa4\xe8\x4e\x17\x99\xed\x88\x12\x71\x53\x6f\x15\x1e\x1f\x84\x13\x52\xe4\xd1\x28\xf1\xa3\xc1\xf4\x88\xe2\xc5\xe5\x5d\xa2\x8c\xc6\x69\x63\xa2\x2f\x97\xb9\xf8\x1e\x15\x33\xaa\xc8\x3d\x9e\x8a\x7e\xfd\x3d\x6d\x8b\xdf\xa4\xbc\x84\x16\x8a\xd7\x86\xc9\x77\x86\x19\xe2\xc4\x5a\xa8\xbc\x46\xf1\x60\x6a\x86\x13\x87\xd6\x16\x3f\xb4\x1e\x51\x90\x29\x11\xda\xe7\xe5\x30\xe4\xa9\x79\xa2\x9d\x1f\x8e\xc1\xfd\x88\x87\x09\x8a\x66\x92\x2c\x26\x7a\x8d\x60\x1d\xd4\x4d\xf3\x52\x88\x32\x95\xab\x9e\xa4\xe6\x2c\x95\x33\x93\xfa\xdd\x8c\xd3\x99\x29\x44\x17\xef\xf2\x04\x45\xd3\x13\x3b\x70\x62\x07\x86\x9c\xef\x59\xfc\xaf\x33\x3b\xa8\xa9\x1a\x4e\xbd\x55\x46\x31\x6a\xc6\xa8\xe1\xea\x6d\x68\x4f\x35\xdb\x53\xfb\x34\x70\xf1\x4f\xec\x27\x49\x6f\x89\x9f\x00\x27\x86\xae\x3f\x97\x08\x28\x27\x46\xb2\xcc\xa1\xb3\x91\xd2\xb7\x63\xea\xff\x3d\xad\xde\xb1\x21\x1a\x25\xc9\xc4\x54\x75\x75\x6c\x3e\x21\xc4\x34\xf4\x64\xf1\x99\xe5\xd6\x8a\x32\xcb\x2a\x27\xc4\xe4\x7a\x66\xe2\x63\xc4\x2b\xad\x30\x97\x3f\x27\xdc\x93\xcb\x2d\xdb\x0e\xda\xa2\x3e\xd1\x33\xee\x77\xf1\x05\x42\xb5\x15\x15\xbe\x32\x9f\x15\x08\x73\x4f\x2e\x21\x66\x37\xd1\x07\xf5\xf9\x9c\xf1\x0a\xcb\xe2\xbe\x10\x1f\x4b\x88\x19\xa5\x3a\xef\x9b\xfa\xdf\xf5\xdb\xa9\x3e\xb4\x6f\xaf\xff\x9e\xa2\x83\xea\xaa\x46\x08\xf6\xaa\x2b\x68\xea\xa2\xba\xab\xd8\x9e\x5d\x5b\x53\x6a\x89\x1a\xdd\x54\x8f\x25\x93\xce\x1e\x5d\xf4\x8a\xee\xf9\x04\xf2\xb6\x2b\xf0\xf2\xca\x0b\xf0\x3d\xff\xef\xe0\xbe\xa2\xdf\xc0\xf7\xe7\x9c\x80\x7f\x98\x79\x14\x3e\x92\x77\x08\x36\xe4\xbe\x03\xbb\xa7\xed\x83\x0b\x67\xbe\x0e\xaf\x16\xbc\x0a\x57\x2c\xde\x0e\x87\xfa\x36\xc3\x53\x0d\x1b\xe1\x9a\xf5\xeb\x60\xfe\xce\x35\xd0\x38\x12\x91\xf3\x5f\x6c\x90\xf3\x7e\x19\x82\x4f\x67\x06\xe0\x82\xdc\xa5\x70\x54\x75\x29\xfc\x6a\x73\x11\x3c\x79\x7c\x3e\x7c\xfe\xf3\x02\xf8\xe4\xa3\xdf\x87\xfd\xac\x3c\xf8\xce\x8e\x29\x72\xfc\xa5\x49\xf0\x4f\x99\x8f\x41\xdb\x3b\x1a\xfe\x71\xcf\x08\x38\xeb\x2f\x6e\xb8\x7d\x72\x26\xbc\xd8\x9a\x0e\xc9\x95\x34\xd8\xff\xb1\x64\xe8\x68\x75\xca\xfd\xde\x20\x70\xc7\xb4\xaf\x92\x84\x53\x77\xdd\x83\x9d\xda\x67\xf0\xe1\xe0\x2d\x58\x7e\xfe\x3a\x8c\x4e\xbb\x02\x57\xec\xbf\x00\x67\x7e\xf3\x1c\xfc\xeb\x8b\xa7\xa1\x9d\xf6\x6b\x78\x62\xdd\x31\xf8\x99\x76\x04\xf6\xb4\xbc\x0b\x7f\xa9\xef\x87\x73\x37\xee\x85\x87\x33\x5e\x83\x77\x76\xbe\x02\xef\x65\x6f\x87\xb1\x63\x9b\xe1\xbc\x05\x2f\xc0\x37\x3f\x6d\x85\xa7\xd7\xfe\x10\xbe\xed\x5e\x0d\x9f\x3a\xda\x08\x8f\x96\xd6\xc3\x9b\x4e\x1b\x9e\xd9\x5b\x2d\xd7\xb3\xa0\x12\x76\x29\xa5\x32\xff\x76\x11\x3c\x58\xbe\x00\xe6\x66\x14\xc2\xd5\x5d\xb3\x60\xed\x73\xf9\x70\x68\xbe\x47\xc6\xce\xc9\xb0\xf9\xe4\x04\x98\xb3\x3e\x1b\xbe\x34\xef\x51\xb9\xae\x61\x23\x60\x55\x8f\x1b\x9e\x3d\x98\x09\xaf\xb6\x3e\x08\x37\x7b\x1f\x90\xe7\x33\x31\x55\x3a\xc0\x05\x7f\x7c\x5b\x81\xe7\x4f\xff\xd3\x25\xec\x78\xeb\x0b\x38\x65\xd3\x5d\x58\xdc\x78\x1b\x3e\x54\x71\x0b\xda\x85\x9f\xc0\x52\xb3\x1b\xf6\x64\x7f\x04\x93\x86\xff\x1e\xbe\x9f\xf9\x5b\xa8\xa5\x9f\x82\xd7\x07\x9c\x80\x73\xd2\x3a\xe1\xec\x01\x87\xe1\xc5\x41\xef\xc2\xbb\x0f\xed\x87\x5b\x1f\x7e\x13\x7e\x30\xe6\x75\xb8\x66\xf2\x4e\x78\xf2\x89\x1d\xf0\x85\x92\xad\xf0\xe3\xda\x4d\xf0\xc0\xfa\x36\x98\xf2\xda\x3a\x78\xe3\x57\x6b\xe1\xd4\xeb\xab\x60\x86\xb3\x09\x2e\x1b\xb5\x02\x4e\x9b\x13\x82\x3f\xfa\x41\x00\x16\xed\xf6\xc1\x97\xcf\x95\xc3\x85\x8e\x12\xd8\x32\x71\x31\x1c\x1d\x98\x0f\x67\xec\x9e\x03\xcf\x75\xcf\x82\x67\x33\x67\xc8\x79\x96\xe4\xc2\xcc\x1d\xdf\x85\x95\xd7\x26\xc1\x61\xa3\xc6\xcb\x7c\x68\x2c\x3c\x75\xe4\x5b\x30\x96\x3c\x1c\x0e\x5d\xe2\x86\x97\xf7\x65\x42\x87\x23\x03\xb6\x15\x0d\x84\x4d\x07\xfa\xcb\x71\x03\x74\xb8\x72\xb9\x13\x3e\x7b\x96\xca\xf3\x1a\xff\x0f\x7c\x8d\x3a\xb6\x7d\x0e\xaf\x28\x77\x61\x51\xe0\x36\xcc\xfe\xe8\x16\x2c\xfe\xde\x0d\x78\xed\xd0\x55\xd9\x7f\xcc\x25\x78\x73\xd7\x79\xe8\x1b\x76\x0e\x3e\xfe\xe2\x19\xb8\x64\xf0\x07\xf0\xf4\xa6\xe3\x70\x43\x7a\x27\xdc\xb6\xed\x30\xbc\x93\xf5\x1e\xfc\xc9\x1b\xbf\x80\xab\xc7\xbf\x05\x0f\x74\xfe\x4c\xce\x5b\xb8\x47\xf6\xbb\xf6\x0a\xfc\xa2\xfe\x65\x98\x9b\xba\x15\x9e\xd9\xbd\x09\xbe\x64\x6e\x84\x6f\x5c\x6e\x85\x7f\x6b\x6a\x81\xd1\x6f\x3c\x03\xf3\x8f\x45\xe0\x4c\xdf\x4a\xb8\x36\xad\x1e\xfe\xfd\x90\x2d\xc7\x2d\x0d\xc0\xe7\xd3\xfd\x32\x3e\x69\xc1\x2f\x57\x7a\x61\xd3\xb8\x25\xf0\x3b\x37\x17\xc2\x21\xaf\xce\x83\xe3\x8a\x0b\x60\x7d\xe6\x2c\xd8\x73\x29\x1f\xb6\xb6\xe7\xc2\xa7\xac\x29\xb0\xe0\xdb\x8f\xc3\xe5\xf7\x72\xe0\xc1\x58\x36\x1c\xb5\x61\x34\x8c\x2d\x19\x05\x1b\xc7\x3c\x02\x17\x2b\x6e\x79\x7e\x17\x32\xe1\xaa\x9f\x67\xc0\xe3\xeb\x06\xc9\x71\x4b\xd3\xe0\xde\xe9\x29\xf0\x89\xe1\x2e\x98\x94\xe4\x80\x1f\xff\x99\x40\xf1\xcb\xa9\xa7\x7a\x78\xae\xf8\x13\x9e\xcf\x0b\x56\x59\x01\xf2\xef\x00\x00\x00\xff\xff\xef\x0a\x80\xfc\xb5\x0d\x00\x00")

func BchainWasmBytes() ([]byte, error) {
	return bindataRead(
		_BchainWasm,
		"../bchain.wasm",
	)
}

func BchainWasm() (*asset, error) {
	bytes, err := BchainWasmBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../bchain.wasm", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../bchain.wasm": BchainWasm,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": {nil, map[string]*bintree{
		"bchain.wasm": {BchainWasm, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
