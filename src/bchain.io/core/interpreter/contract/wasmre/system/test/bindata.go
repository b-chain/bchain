// Code generated by go-bindata.
// sources:
// ../system.wasm
// DO NOT EDIT!

package test

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _SystemWasm = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\x31\x4f\xeb\x30\x14\x85\xcf\xbd\x71\xfa\x5e\x5f\xd4\x57\x0f\x6f\x78\x0b\x92\x41\x0c\x1d\x41\x42\x9e\x6b\xa1\xae\x08\x31\xb2\x34\x51\xf0\xd0\xd0\xa4\x28\x31\x95\x3a\xb9\x15\x0c\x8c\x5d\x58\x91\xf8\x0f\x6c\xfc\x11\x46\x7e\x0a\x72\x52\x84\x60\xc9\x39\xf7\xcb\xd1\x3d\xb6\x91\x35\xe5\x00\x00\x3d\xae\xd7\x6b\x88\x94\x3c\xd2\xc8\x7b\x8f\x94\x3c\xf9\x94\xbd\x07\xbf\x85\x5f\x71\x64\xab\xe5\x20\xcb\xdd\x6c\x51\x4d\x1b\x5b\x5d\xd9\x1a\x08\x6c\x98\x2f\x2a\x57\x67\xb9\x9b\xe6\xb5\xcd\x9c\x05\x05\xda\xb7\xe5\xcc\x4d\x96\xb6\x72\x88\xda\xb9\xb1\xee\xc2\x36\xb7\xf3\xdd\xdc\x6b\x5c\x3d\xb7\x15\x38\xba\x0b\xdb\x39\x82\xb8\x0f\x86\x6e\x80\xb8\x45\x04\xfa\xf5\x1a\x4c\xd4\x2b\x6d\xb9\xa8\x57\x8c\xbd\xe9\xe5\x99\x6e\x56\x8d\xb3\xe5\xf1\x49\xd7\x76\xba\x2b\x9f\x9c\xe7\x88\xff\x7e\x67\xe8\xf5\x37\x61\x01\xfe\xbc\x6c\x42\xc7\x73\xf8\x12\x79\x1e\x1b\x18\x8c\x58\x98\x2d\x5d\x1f\xb0\x66\xa1\xd8\x1c\x15\x12\xad\x28\x52\x6c\xde\x51\xc8\x4f\x15\xfb\xc1\x49\xcd\x2a\x88\x14\x9a\x0f\x15\x1b\x68\xfe\xaf\x58\x91\xe6\x7f\x8a\xbb\xa4\x66\xd9\x5a\x59\x68\x1e\x75\x91\xdf\x5d\x44\x7c\x45\x42\x89\x2a\x14\xcb\x1d\x51\x24\x23\x13\xe0\x96\x0a\xcd\x22\x49\x1e\xda\x23\x2b\x28\xc8\x38\x49\x9e\xda\xd7\x81\x11\x89\x50\x63\x00\x46\x26\xc3\x1f\xb7\xfc\x08\x00\x00\xff\xff\x64\xcf\xc7\xf7\xc3\x01\x00\x00")

func SystemWasmBytes() ([]byte, error) {
	return bindataRead(
		_SystemWasm,
		"../system.wasm",
	)
}

func SystemWasm() (*asset, error) {
	bytes, err := SystemWasmBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../system.wasm", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../system.wasm": SystemWasm,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": {nil, map[string]*bintree{
		"system.wasm": {SystemWasm, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
