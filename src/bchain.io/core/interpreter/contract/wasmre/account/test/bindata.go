// Code generated by go-bindata.
// sources:
// ../account.wasm
// DO NOT EDIT!

package test

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _AccountWasm = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\x3f\x6f\xd4\x40\x10\xc5\xdf\xce\xce\x5d\xee\xb2\x44\x5a\x51\x50\x50\xad\x52\x51\x22\x90\x42\x9b\x2d\x90\xa8\x10\x82\x8e\xc6\x36\xf6\x2a\xf8\x92\xb3\xc1\xbb\xe6\x4f\xb5\x8e\x02\x12\x05\x1d\x1f\x81\x2f\x90\x86\x9e\x82\x92\x0f\x85\xc6\xc7\x21\xa4\xc8\xd2\xee\x7b\x6f\xc6\xbf\x9d\x41\x15\xb7\x47\x00\xd4\xf7\x69\x9a\xb0\x2c\x55\x46\xa9\xb2\xca\xa5\xce\x59\x2e\xce\x39\x67\x94\x24\x87\x44\xa0\xab\xcb\x69\xc2\x4a\x87\xee\xdd\x51\x55\xa7\xb6\xef\x8a\x18\xba\x26\x0c\x80\x64\xcb\xe6\x55\x71\x16\x12\x68\x6f\x62\x48\xd0\x62\x6e\xb5\xf1\x49\xf8\xe0\x9b\x66\x08\x31\x42\x49\x64\x86\xf0\x76\x6c\x87\xe0\xc7\xf4\x7a\x97\xac\x63\x48\xcf\x43\x1c\x2f\x12\x78\xe7\xd3\xf0\xe0\xa2\x7f\xbf\xc7\xaf\x62\x1a\x36\x7d\xdb\xc9\x03\x9f\x65\x62\xd6\xbc\x00\x7f\x12\xa9\xde\x00\x8b\xab\x59\x41\x1d\xfc\x12\xb1\x58\x6e\xc3\xb6\x1f\x3e\x12\xee\x14\x2f\x9f\x3e\xaa\xea\xba\x1f\xbb\xf4\x30\x86\xf4\xf8\x59\xfd\xe2\x7e\xd1\x62\x75\xfb\xff\xc2\xd9\x5c\xc0\x5a\xcb\xd4\x87\x5a\x16\x31\xeb\x4b\x21\xe1\xf0\x87\xec\xcd\xbf\x67\xbe\xca\x74\xea\xe1\x71\x8f\xd8\x5f\xab\xf3\x63\x3e\x21\x76\xec\x27\xb5\xb1\xf8\x7b\xf3\x5d\xa7\xac\x96\x63\xe9\xd8\x5b\xa7\x1c\xdb\x03\x47\x4e\x5b\xf2\xd2\x73\xad\x36\x27\xc4\xc6\xfc\xbc\x01\x9c\xe8\xfc\x98\x04\x28\xbf\x92\xc0\x1c\xcd\x00\x12\xc0\x0c\x57\x76\xe1\x21\x9a\x76\x90\xaf\xf3\x88\x4e\x3e\x69\x5b\x99\x2f\xff\x02\xbb\x36\xe6\x9b\x38\x82\x67\xc3\xee\x14\x80\xb7\x86\xab\xba\xc6\x9f\x00\x00\x00\xff\xff\x80\xb5\x41\x71\xfd\x01\x00\x00")

func AccountWasmBytes() ([]byte, error) {
	return bindataRead(
		_AccountWasm,
		"../account.wasm",
	)
}

func AccountWasm() (*asset, error) {
	bytes, err := AccountWasmBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../account.wasm", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../account.wasm": AccountWasm,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": {nil, map[string]*bintree{
		"account.wasm": {AccountWasm, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
