// Code generated by go-bindata.
// sources:
// ../big_token.wasm
// DO NOT EDIT!

package test

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _Big_tokenWasm = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xcf\x6f\x1b\xc5\x17\x7f\x33\x3b\xde\x5d\x67\x92\x6f\xa6\xe9\xaf\x6f\xfd\xed\x97\xbe\x58\x42\xea\x81\x43\x8a\xd4\x00\x3d\x65\x24\x2a\x7e\x1c\x4a\x45\x39\x20\x2e\xf6\xda\x9e\x06\x6f\xd6\x76\xf0\xae\x21\x91\x50\xbd\x05\x0e\x08\xe5\x60\x55\xfc\x01\xbd\x23\xa4\xfc\x01\x3d\xf8\xc2\x3d\xe2\x8c\x50\xb8\x71\xec\x85\x3b\x7a\x33\xeb\xf5\x36\x2d\x02\xa9\x22\x89\xd6\xf3\xde\xe7\x33\xf3\x79\xef\x93\xc9\xbe\x40\x94\x0e\xd6\x00\x80\xfd\x9c\xe7\x39\xac\xb6\xd9\x14\xda\x6c\xca\xa6\x6d\x3e\x9d\x42\xdb\x9b\x4e\x69\x2d\xa6\x53\x8a\x80\x3d\x68\x87\x53\xfb\xf5\x60\x0a\x6d\x4e\x0f\x7f\x11\x05\x65\xde\xb3\xe4\x9a\x8b\xf8\x1f\x0f\xf3\x1c\xd6\x3d\x33\xfc\x7c\x2d\xea\x66\xfd\xd1\xb0\x95\x9a\x61\xcf\x8c\x01\x28\xe7\x47\x69\x6a\xc6\x19\x70\x0a\x82\x4e\x7f\xb7\x15\xf5\x7a\xe0\x51\xb4\x4a\x91\x39\xd8\x6f\xa5\xd1\x7d\x53\x49\x0d\x26\xc9\xd9\x54\x3a\xe9\x3c\x93\x4a\x46\xdd\xbd\xd6\x70\x32\xe8\x98\x31\xd4\x28\xb5\xd2\xeb\xb4\xcc\x60\x3f\x89\xba\x06\x84\xd5\xed\x75\x5a\xbb\x26\x73\x1b\x28\x48\x4d\xe6\x10\x39\x36\x9f\x4d\xfa\x63\xa3\x27\xd9\xa7\xc0\x28\x53\x4f\x4d\xf6\xa1\x49\x27\x49\x51\x66\x3d\xcd\xc6\xaf\x27\xa3\x2f\x16\x3d\x84\x69\x36\x8e\x47\xfd\xe1\xe2\xb4\x34\x1b\x27\x66\x08\xcc\x7b\x44\x96\x9e\xf3\x83\xb0\xbe\xc2\x39\xe7\x75\x19\x72\x00\x00\xf1\x0d\xe5\xd9\x3e\x40\xed\x6b\xbb\x02\x16\xfc\xf4\x95\xa5\x0e\xcc\x60\x34\x3e\xe4\x70\xad\xf5\xc9\x9d\x9b\xd9\x68\xcf\x0c\xb7\xbb\x63\x13\x65\xe6\xf6\xdd\xee\xbd\xad\x96\xfb\xe9\x1f\xc6\xb0\xde\x28\x19\x37\xfb\x69\x3a\x59\x12\x0e\x63\x38\x87\x25\xf8\x66\x36\x8e\x86\xe9\x7d\x33\xae\x1e\x70\x18\xc3\xc6\x95\x92\xf2\x56\x27\x4a\xa2\x61\xd7\x7c\x70\xdf\x71\xe0\xfc\xa5\x25\xb6\x6b\xb2\x7b\x93\xfd\xfd\xe4\xf0\xf6\xdd\x2e\x5c\x58\x6e\xba\x71\x63\xd7\x64\x6f\x9b\x6e\x7f\x10\x25\x29\x61\x17\xcf\x6c\x3a\x1c\x74\x46\x09\x01\x97\x2e\x94\xc0\x1b\xbb\x26\xbb\x13\x0d\xa8\x56\xb8\xec\xbb\xc6\xe0\xbf\x35\x5b\x3f\x5c\x09\x17\xa5\x42\xa3\x5e\x96\x04\xff\xab\x97\x25\xc0\x55\x59\x11\x85\xff\xd7\x4b\x1d\x78\x25\x28\x8e\x86\x6b\xf5\x87\xe4\x29\xac\xcc\x8e\xc8\xd1\x47\xe4\x2b\x63\x53\xbe\xa3\x41\xc3\x75\x2e\xf4\x9c\xef\x35\xc3\x6d\x2e\x30\xc4\xda\x36\x7f\xc2\xd1\xc7\x40\x29\x0c\x75\xce\x63\x05\xc5\xe7\x4a\x03\x99\xfa\x8f\x9e\xc3\xbb\x5a\x29\x86\xbc\x58\x6f\x29\x46\x04\x16\xeb\x39\x60\xb1\x54\x6b\xc8\x88\xac\x82\x02\x3a\xa9\x42\xa1\x7e\xc2\x63\x2d\x4a\xf0\xb4\x0a\x72\x3a\xb8\x84\x9e\x56\x21\x0f\xbd\x0a\x94\xb3\x0a\x24\x50\x10\xa4\x67\x0c\x3d\x0c\x95\xd7\xc0\x10\x05\x86\x4a\x6c\x0a\xc7\x71\x5c\x1e\x2f\x8b\x40\xa1\x02\x4d\xbd\xcd\x79\xbc\xcd\x85\x94\x3f\x90\x47\x9c\x4d\xd9\x03\x32\x66\x93\xf3\x1d\xe5\x37\x3d\x84\x8f\xd6\x00\x3d\x64\x3f\x22\x7c\xf9\xf1\x26\x97\xc8\xf5\x09\x57\x4c\xca\x5f\x9e\xb7\xb1\xb6\xd7\xf4\xc9\x46\xaf\xf0\xe6\x31\x53\x0c\x05\xd6\x94\x42\x5f\xcf\x6a\xe4\xa5\xfb\x3c\xe3\xa5\xaf\x67\xa2\xf0\xcf\x2e\xc9\x3f\x15\x6a\x78\x5f\xcf\x99\x85\x61\x9b\x1f\x89\x82\x76\x52\xa5\xf9\xfa\x48\xc4\x2a\x6c\xa0\x7f\x9d\x1f\x09\x0d\xef\xe8\x53\x56\x1e\x68\x2d\x2a\x98\xcd\x1a\xfa\x3a\xf7\x1c\x97\x52\x58\x24\x8a\x27\x2f\x60\xae\xea\xc5\xee\xa7\xcf\xea\xd0\x15\x08\x1b\xe4\xb0\x5d\xd3\x93\xc5\xe4\xb4\x5d\xb8\xfd\x2c\x56\xa2\x81\x7e\x21\xc0\x5c\xb3\x65\x05\x0c\x7d\x15\xc6\x1a\x6e\x01\x2c\x19\x96\x4d\x07\xf8\x24\xad\x09\x99\xd7\xdc\x2f\xe4\xf7\x87\x67\x0d\x3e\x16\x7b\xcd\x80\x0c\x16\x85\x79\x33\xae\x18\x35\xa2\x14\x06\x3a\x17\x64\x70\x40\x6d\x90\x97\x9e\x5b\xd2\xc5\x71\x5e\x1e\x13\x39\xb0\xc5\x5b\xc4\x31\x44\xbc\xe0\x35\x7d\x87\x96\x45\x3a\x96\xbf\xdc\xc3\xa9\x4f\xc7\xa9\xa9\x3a\x32\xb5\x4a\x11\x8b\x31\xa0\x1b\x82\x81\x5a\x6b\x7a\x2e\xb3\x3c\x03\xbd\x05\xa7\xf0\xc9\xe1\xae\xd9\x40\x1f\x0b\xd7\xec\x6f\xf9\xd9\x66\x73\xbe\xd7\xf4\xa8\x59\xa6\x56\xf9\x0e\xdf\x41\x0f\x39\x32\xf4\xa8\x21\x27\xd1\x64\xb7\xe9\x6e\xba\xfb\xad\xe4\x2a\x93\xe8\xe9\xad\x5b\x90\x33\x97\xd4\x4c\x49\xa9\x2d\xa3\xb8\xe3\xbf\xbe\x50\x85\x6f\x73\x61\x15\xb8\xbb\x32\x9c\xfe\x0e\xab\x12\xbc\x2a\xc1\x0b\x09\x5e\x95\xe0\xff\x5c\xc2\xde\xab\xbf\x93\x80\x97\x92\x98\xff\xfb\x12\xa7\x2f\x2d\xf1\xbd\x7d\x27\x23\x7d\x33\xe4\xe8\xd1\x8b\x02\x7d\xb5\x2e\x67\xcf\x01\xea\x9c\x7c\xf4\x02\xb6\xda\x90\xdf\x55\xd2\xea\xbc\xfc\xb6\x0c\xd5\x85\x6a\x70\xb1\x1a\x5c\xaa\x06\x97\xa5\x9c\xd3\x8b\x6c\x1d\xb4\x90\xa2\xad\x01\x40\x2b\xb9\x91\xda\x19\x82\x89\x19\xa2\x39\xe8\x1a\xd3\x03\xd0\x5b\x52\x0d\xa3\x81\x79\x36\x39\x07\x19\x16\x64\x00\x7d\x02\xb2\xde\x4f\xdf\xa3\xe1\x45\xe1\x29\x48\xdf\x6e\x01\xd0\x4f\x41\xae\xf4\x8a\x39\x45\x71\xce\x64\x98\xda\x19\x46\xd1\x8c\x49\xef\xc6\x16\x80\x7e\xcc\xe4\x86\x1d\x7e\x48\x73\xbf\xa2\xc3\xe4\x55\x9b\xbf\x85\x85\x5c\x3f\xc5\xe1\x28\x43\x73\xd0\x4f\xb3\x4d\x12\x63\xf2\xd5\x82\x61\x27\x2b\x76\xa3\xa1\x65\xd8\xe4\x6b\xd8\x4f\x12\xb3\x1b\x25\x44\x9d\x71\x79\x71\x31\x59\xcf\xe8\x1c\x73\x79\x6d\x01\xfd\xa5\xd4\x09\x97\xeb\xee\x1f\x37\x34\x07\xfb\xfd\xb1\xe9\xc1\x9f\x01\x00\x00\xff\xff\x9a\xc5\x3f\xd3\x34\x0a\x00\x00")

func Big_tokenWasmBytes() ([]byte, error) {
	return bindataRead(
		_Big_tokenWasm,
		"../big_token.wasm",
	)
}

func Big_tokenWasm() (*asset, error) {
	bytes, err := Big_tokenWasmBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../big_token.wasm", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../big_token.wasm": Big_tokenWasm,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": {nil, map[string]*bintree{
		"big_token.wasm": {Big_tokenWasm, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
