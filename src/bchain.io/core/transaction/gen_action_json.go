// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package transaction

import (
	"encoding/json"
	"errors"
	"bchain.io/common/types"
)

var _ = (*actionMarshaling)(nil)

func (a Action) MarshalJSON() ([]byte, error) {
	type Action struct {
		Contract types.Address      `json:"contract" gencodec:"required"`
		Params   types.BytesForJson `json:"params"   gencodec:"required"`
	}
	var enc Action
	enc.Contract = a.Contract
	enc.Params = a.Params
	return json.Marshal(&enc)
}

func (a *Action) UnmarshalJSON(input []byte) error {
	type Action struct {
		Contract *types.Address     `json:"contract" gencodec:"required"`
		Params   types.BytesForJson `json:"params"   gencodec:"required"`
	}
	var dec Action
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Contract == nil {
		return errors.New("missing required field 'contract' for Action")
	}
	a.Contract = *dec.Contract
	if dec.Params == nil {
		return errors.New("missing required field 'params' for Action")
	}
	a.Params = dec.Params
	return nil
}
