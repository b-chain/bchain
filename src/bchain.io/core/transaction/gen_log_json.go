// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package transaction

import (
	"encoding/json"
	"errors"
	"bchain.io/common/types"
)

var _ = (*logMarshaling)(nil)

func (l Log) MarshalJSON() ([]byte, error) {
	type Log struct {
		Address     types.Address        `json:"address" gencodec:"required"`
		Topics      []types.Hash         `json:"topics" gencodec:"required"`
		Data        []types.BytesForJson `json:"data" gencodec:"required"`
		BlockNumber types.Uint64ForJson  `json:"blockNumber"`
		TxHash      types.Hash           `json:"transactionHash" gencodec:"required"`
		TxIndex     types.UintForJson    `json:"transactionIndex" gencodec:"required"`
		BlockHash   types.Hash           `json:"blockHash"`
		Index       types.UintForJson    `json:"logIndex" gencodec:"required"`
		Removed     bool                 `json:"removed"  msg:"-"`
	}
	var enc Log
	enc.Address = l.Address
	enc.Topics = l.Topics
	if l.Data != nil {
		enc.Data = make([]types.BytesForJson, len(l.Data))
		for k, v := range l.Data {
			enc.Data[k] = v
		}
	}
	enc.BlockNumber = types.Uint64ForJson(l.BlockNumber)
	enc.TxHash = l.TxHash
	enc.TxIndex = types.UintForJson(l.TxIndex)
	enc.BlockHash = l.BlockHash
	enc.Index = types.UintForJson(l.Index)
	enc.Removed = l.Removed
	return json.Marshal(&enc)
}

func (l *Log) UnmarshalJSON(input []byte) error {
	type Log struct {
		Address     *types.Address       `json:"address" gencodec:"required"`
		Topics      []types.Hash         `json:"topics" gencodec:"required"`
		Data        []types.BytesForJson `json:"data" gencodec:"required"`
		BlockNumber *types.Uint64ForJson `json:"blockNumber"`
		TxHash      *types.Hash          `json:"transactionHash" gencodec:"required"`
		TxIndex     *types.UintForJson   `json:"transactionIndex" gencodec:"required"`
		BlockHash   *types.Hash          `json:"blockHash"`
		Index       *types.UintForJson   `json:"logIndex" gencodec:"required"`
		Removed     *bool                `json:"removed"  msg:"-"`
	}
	var dec Log
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Address == nil {
		return errors.New("missing required field 'address' for Log")
	}
	l.Address = *dec.Address
	if dec.Topics == nil {
		return errors.New("missing required field 'topics' for Log")
	}
	l.Topics = dec.Topics
	if dec.Data == nil {
		return errors.New("missing required field 'data' for Log")
	}
	l.Data = make([][]byte, len(dec.Data))
	for k, v := range dec.Data {
		l.Data[k] = v
	}
	if dec.BlockNumber != nil {
		l.BlockNumber = uint64(*dec.BlockNumber)
	}
	if dec.TxHash == nil {
		return errors.New("missing required field 'transactionHash' for Log")
	}
	l.TxHash = *dec.TxHash
	if dec.TxIndex == nil {
		return errors.New("missing required field 'transactionIndex' for Log")
	}
	l.TxIndex = uint(*dec.TxIndex)
	if dec.BlockHash != nil {
		l.BlockHash = *dec.BlockHash
	}
	if dec.Index == nil {
		return errors.New("missing required field 'logIndex' for Log")
	}
	l.Index = uint(*dec.Index)
	if dec.Removed != nil {
		l.Removed = *dec.Removed
	}
	return nil
}
