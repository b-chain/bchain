// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package block

import (
	"encoding/json"
	"errors"
	"bchain.io/common/types"
)

var _ = (*headerMarshaling)(nil)

func (h Header) MarshalJSON() ([]byte, error) {
	type Header struct {
		ParentHash      types.Hash         `json:"parentHash"         gencodec:"required"`
		StateRootHash   types.Hash         `json:"stateRoot"          gencodec:"required"`
		TxRootHash      types.Hash         `json:"transactionsRoot"   gencodec:"required"`
		ReceiptRootHash types.Hash         `json:"receiptsRoot"       gencodec:"required"`
		Bloom           types.Bloom        `json:"logsBloom"          gencodec:"required"`
		Number          *types.BigInt      `json:"number"             gencodec:"required"`
		Time            *types.BigInt      `json:"timestamp"          gencodec:"required"`
		Cdata           ConsensusData      `json:"consensusData"      gencodec:"required"`
		Extra           types.BytesForJson `json:"extraData"          gencodec:"required"`
		V               *types.BigInt      `json:"v"`
		R               *types.BigInt      `json:"r"`
		S               *types.BigInt      `json:"s"`
		Producer        types.Address      `json:"blockProducer"      gencodec:"required"   msg:"-"`
		Hash            types.Hash         `json:"hash"`
	}
	var enc Header
	enc.ParentHash = h.ParentHash
	enc.StateRootHash = h.StateRootHash
	enc.TxRootHash = h.TxRootHash
	enc.ReceiptRootHash = h.ReceiptRootHash
	enc.Bloom = h.Bloom
	enc.Number = h.Number
	enc.Time = h.Time
	enc.Cdata = h.Cdata
	enc.Extra = h.Extra
	enc.V = h.V
	enc.R = h.R
	enc.S = h.S
	enc.Producer = h.Producer
	enc.Hash = h.Hash()
	return json.Marshal(&enc)
}

func (h *Header) UnmarshalJSON(input []byte) error {
	type Header struct {
		ParentHash      *types.Hash        `json:"parentHash"         gencodec:"required"`
		StateRootHash   *types.Hash        `json:"stateRoot"          gencodec:"required"`
		TxRootHash      *types.Hash        `json:"transactionsRoot"   gencodec:"required"`
		ReceiptRootHash *types.Hash        `json:"receiptsRoot"       gencodec:"required"`
		Bloom           *types.Bloom       `json:"logsBloom"          gencodec:"required"`
		Number          *types.BigInt      `json:"number"             gencodec:"required"`
		Time            *types.BigInt      `json:"timestamp"          gencodec:"required"`
		Cdata           *ConsensusData     `json:"consensusData"      gencodec:"required"`
		Extra           types.BytesForJson `json:"extraData"          gencodec:"required"`
		V               *types.BigInt      `json:"v"`
		R               *types.BigInt      `json:"r"`
		S               *types.BigInt      `json:"s"`
		Producer        *types.Address     `json:"blockProducer"      gencodec:"required"   msg:"-"`
	}
	var dec Header
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.ParentHash == nil {
		return errors.New("missing required field 'parentHash' for Header")
	}
	h.ParentHash = *dec.ParentHash
	if dec.StateRootHash == nil {
		return errors.New("missing required field 'stateRoot' for Header")
	}
	h.StateRootHash = *dec.StateRootHash
	if dec.TxRootHash == nil {
		return errors.New("missing required field 'transactionsRoot' for Header")
	}
	h.TxRootHash = *dec.TxRootHash
	if dec.ReceiptRootHash == nil {
		return errors.New("missing required field 'receiptsRoot' for Header")
	}
	h.ReceiptRootHash = *dec.ReceiptRootHash
	if dec.Bloom == nil {
		return errors.New("missing required field 'logsBloom' for Header")
	}
	h.Bloom = *dec.Bloom
	if dec.Number == nil {
		return errors.New("missing required field 'number' for Header")
	}
	h.Number = dec.Number
	if dec.Time == nil {
		return errors.New("missing required field 'timestamp' for Header")
	}
	h.Time = dec.Time
	if dec.Cdata == nil {
		return errors.New("missing required field 'consensusData' for Header")
	}
	h.Cdata = *dec.Cdata
	if dec.Extra == nil {
		return errors.New("missing required field 'extraData' for Header")
	}
	h.Extra = dec.Extra
	if dec.V != nil {
		h.V = dec.V
	}
	if dec.R != nil {
		h.R = dec.R
	}
	if dec.S != nil {
		h.S = dec.S
	}
	if dec.Producer == nil {
		return errors.New("missing required field 'blockProducer' for Header")
	}
	h.Producer = *dec.Producer
	return nil
}
