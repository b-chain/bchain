// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package block

import (
	"encoding/json"
	"errors"
	"bchain.io/common/types"
)

var _ = (*consensusDataMarshaling)(nil)

func (c ConsensusData) MarshalJSON() ([]byte, error) {
	type ConsensusData struct {
		Id   string             `json:"consensus_id"         gencodec:"required"`
		Para types.BytesForJson `json:"consensus_param"      gencodec:"required"`
	}
	var enc ConsensusData
	enc.Id = c.Id
	enc.Para = c.Para
	return json.Marshal(&enc)
}

func (c *ConsensusData) UnmarshalJSON(input []byte) error {
	type ConsensusData struct {
		Id   *string            `json:"consensus_id"         gencodec:"required"`
		Para types.BytesForJson `json:"consensus_param"      gencodec:"required"`
	}
	var dec ConsensusData
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Id == nil {
		return errors.New("missing required field 'consensus_id' for ConsensusData")
	}
	c.Id = *dec.Id
	if dec.Para == nil {
		return errors.New("missing required field 'consensus_param' for ConsensusData")
	}
	c.Para = dec.Para
	return nil
}
