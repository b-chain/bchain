// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package bchain

import (
	"bchain.io/common/types"
	"bchain.io/core/genesis"
	"bchain.io/core/txprocessor"
	"bchain.io/node/services/bchain/downloader"
)

var _ = (*configMarshaling)(nil)
func (c Config) MarshalTOML() (interface{}, error) {
	type Config struct {
		Genesis				*genesis.Genesis	`toml:"-"`
		NetworkId			uint64
		SyncMode			downloader.SyncMode
		LightServ			int	`toml:",omitempty"`
		LightPeers			int	`toml:",omitempty"`
		SkipBcVersionCheck		bool	`toml:"-"`
		DatabaseHandles			int	`toml:"-"`
		DatabaseCache			int
		Coinbase			types.Address		`toml:",omitempty"`
		BlockproducerThreads		int			`toml:",omitempty"`
		ExtraData			types.BytesForJson	`toml:",omitempty"`
		TxPool				txprocessor.TxPoolConfig
		EnablePreimageRecording		bool
		DocRoot				string	`toml:"-"`
		StartBlockproducerAtStart	bool
	}
	var enc Config
	enc.Genesis = c.Genesis
	enc.NetworkId = c.NetworkId
	enc.SyncMode = c.SyncMode
	enc.LightServ = c.LightServ
	enc.LightPeers = c.LightPeers
	enc.SkipBcVersionCheck = c.SkipBcVersionCheck
	enc.DatabaseHandles = c.DatabaseHandles
	enc.DatabaseCache = c.DatabaseCache
	enc.Coinbase = c.Coinbase
	enc.BlockproducerThreads = c.BlockproducerThreads
	enc.ExtraData = c.ExtraData
	enc.TxPool = c.TxPool
	enc.EnablePreimageRecording = c.EnablePreimageRecording
	enc.DocRoot = c.DocRoot
	enc.StartBlockproducerAtStart = c.StartBlockproducerAtStart
	return &enc, nil
}

func (c *Config) UnmarshalTOML(unmarshal func (interface{}) error) error {
	type Config struct {
		Genesis				*genesis.Genesis	`toml:"-"`
		NetworkId			*uint64
		SyncMode			*downloader.SyncMode
		LightServ			*int	`toml:",omitempty"`
		LightPeers			*int	`toml:",omitempty"`
		SkipBcVersionCheck		*bool	`toml:"-"`
		DatabaseHandles			*int	`toml:"-"`
		DatabaseCache			*int
		Coinbase			*types.Address		`toml:",omitempty"`
		BlockproducerThreads		*int			`toml:",omitempty"`
		ExtraData			types.BytesForJson	`toml:",omitempty"`
		TxPool				*txprocessor.TxPoolConfig
		EnablePreimageRecording		*bool
		DocRoot				*string	`toml:"-"`
		StartBlockproducerAtStart	*bool
	}
	var dec Config
	if err := unmarshal(&dec); err != nil {
		return err
	}
	if dec.Genesis != nil {
		c.Genesis = dec.Genesis
	}
	if dec.NetworkId != nil {
		c.NetworkId = *dec.NetworkId
	}
	if dec.SyncMode != nil {
		c.SyncMode = *dec.SyncMode
	}
	if dec.LightServ != nil {
		c.LightServ = *dec.LightServ
	}
	if dec.LightPeers != nil {
		c.LightPeers = *dec.LightPeers
	}
	if dec.SkipBcVersionCheck != nil {
		c.SkipBcVersionCheck = *dec.SkipBcVersionCheck
	}
	if dec.DatabaseHandles != nil {
		c.DatabaseHandles = *dec.DatabaseHandles
	}
	if dec.DatabaseCache != nil {
		c.DatabaseCache = *dec.DatabaseCache
	}
	if dec.Coinbase != nil {
		c.Coinbase = *dec.Coinbase
	}
	if dec.BlockproducerThreads != nil {
		c.BlockproducerThreads = *dec.BlockproducerThreads
	}
	if dec.ExtraData != nil {
		c.ExtraData = dec.ExtraData
	}
	if dec.TxPool != nil {
		c.TxPool = *dec.TxPool
	}
	if dec.EnablePreimageRecording != nil {
		c.EnablePreimageRecording = *dec.EnablePreimageRecording
	}
	if dec.DocRoot != nil {
		c.DocRoot = *dec.DocRoot
	}
	if dec.StartBlockproducerAtStart != nil {
		c.StartBlockproducerAtStart = *dec.StartBlockproducerAtStart
	}
	return nil
}

