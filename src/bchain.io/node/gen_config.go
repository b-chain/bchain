// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package node

import (
	"bchain.io/communication/p2p"
)

func (c Config) MarshalTOML() (interface{}, error) {
	type Config struct {
		Name			string	`toml:"-"`
		UserIdent		string	`toml:",omitempty"`
		Version			string	`toml:"-"`
		DataDir			string
		P2P			p2p.Config
		KeyStoreDir		string		`toml:",omitempty"`
		UseLightweightKDF	bool		`toml:",omitempty"`
		NoUSB			bool		`toml:",omitempty"`
		IPCPath			string		`toml:",omitempty"`
		HTTPHost		string		`toml:",omitempty"`
		HTTPPort		int		`toml:",omitempty"`
		HTTPCors		[]string	`toml:",omitempty"`
		HTTPModules		[]string	`toml:",omitempty"`
		WSHost			string		`toml:",omitempty"`
		WSPort			int		`toml:",omitempty"`
		WSOrigins		[]string	`toml:",omitempty"`
		WSModules		[]string	`toml:",omitempty"`
		WSExposeAll		bool		`toml:",omitempty"`
	}
	var enc Config
	enc.Name = c.Name
	enc.UserIdent = c.UserIdent
	enc.Version = c.Version
	enc.DataDir = c.DataDir
	enc.P2P = c.P2P
	enc.KeyStoreDir = c.KeyStoreDir
	enc.UseLightweightKDF = c.UseLightweightKDF
	enc.NoUSB = c.NoUSB
	enc.IPCPath = c.IPCPath
	enc.HTTPHost = c.HTTPHost
	enc.HTTPPort = c.HTTPPort
	enc.HTTPCors = c.HTTPCors
	enc.HTTPModules = c.HTTPModules
	enc.WSHost = c.WSHost
	enc.WSPort = c.WSPort
	enc.WSOrigins = c.WSOrigins
	enc.WSModules = c.WSModules
	enc.WSExposeAll = c.WSExposeAll
	return &enc, nil
}

func (c *Config) UnmarshalTOML(unmarshal func (interface{}) error) error {
	type Config struct {
		Name			*string	`toml:"-"`
		UserIdent		*string	`toml:",omitempty"`
		Version			*string	`toml:"-"`
		DataDir			*string
		P2P			*p2p.Config
		KeyStoreDir		*string		`toml:",omitempty"`
		UseLightweightKDF	*bool		`toml:",omitempty"`
		NoUSB			*bool		`toml:",omitempty"`
		IPCPath			*string		`toml:",omitempty"`
		HTTPHost		*string		`toml:",omitempty"`
		HTTPPort		*int		`toml:",omitempty"`
		HTTPCors		[]string	`toml:",omitempty"`
		HTTPModules		[]string	`toml:",omitempty"`
		WSHost			*string		`toml:",omitempty"`
		WSPort			*int		`toml:",omitempty"`
		WSOrigins		[]string	`toml:",omitempty"`
		WSModules		[]string	`toml:",omitempty"`
		WSExposeAll		*bool		`toml:",omitempty"`
	}
	var dec Config
	if err := unmarshal(&dec); err != nil {
		return err
	}
	if dec.Name != nil {
		c.Name = *dec.Name
	}
	if dec.UserIdent != nil {
		c.UserIdent = *dec.UserIdent
	}
	if dec.Version != nil {
		c.Version = *dec.Version
	}
	if dec.DataDir != nil {
		c.DataDir = *dec.DataDir
	}
	if dec.P2P != nil {
		c.P2P = *dec.P2P
	}
	if dec.KeyStoreDir != nil {
		c.KeyStoreDir = *dec.KeyStoreDir
	}
	if dec.UseLightweightKDF != nil {
		c.UseLightweightKDF = *dec.UseLightweightKDF
	}
	if dec.NoUSB != nil {
		c.NoUSB = *dec.NoUSB
	}
	if dec.IPCPath != nil {
		c.IPCPath = *dec.IPCPath
	}
	if dec.HTTPHost != nil {
		c.HTTPHost = *dec.HTTPHost
	}
	if dec.HTTPPort != nil {
		c.HTTPPort = *dec.HTTPPort
	}
	if dec.HTTPCors != nil {
		c.HTTPCors = dec.HTTPCors
	}
	if dec.HTTPModules != nil {
		c.HTTPModules = dec.HTTPModules
	}
	if dec.WSHost != nil {
		c.WSHost = *dec.WSHost
	}
	if dec.WSPort != nil {
		c.WSPort = *dec.WSPort
	}
	if dec.WSOrigins != nil {
		c.WSOrigins = dec.WSOrigins
	}
	if dec.WSModules != nil {
		c.WSModules = dec.WSModules
	}
	if dec.WSExposeAll != nil {
		c.WSExposeAll = *dec.WSExposeAll
	}
	return nil
}

